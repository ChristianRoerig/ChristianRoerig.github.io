<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code_projects | Christian Roerig</title>
    <link>/code_project/</link>
      <atom:link href="/code_project/index.xml" rel="self" type="application/rss+xml" />
    <description>Code_projects</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2021</copyright><lastBuildDate>Wed, 27 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/avatar.jpg</url>
      <title>Code_projects</title>
      <link>/code_project/</link>
    </image>
    
    <item>
      <title>Twitter and DeepL</title>
      <link>/code_project/twitter/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/code_project/twitter/</guid>
      <description>&lt;h1 id=&#34;sentiment-analysis&#34;&gt;Sentiment analysis&lt;/h1&gt;
&lt;h2 id=&#34;analysing-bolsonaros-tweets-during-the-covid19-pandemic&#34;&gt;Analysing Bolsonaro&amp;rsquo;s tweets during the Covid19 pandemic&lt;/h2&gt;
&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# General:
import tweepy           # To consume Twitter&#39;s API
import pandas as pd     # To handle data
import numpy as np      # For number computing
import json
import csv

# translations
import deepl

# For plotting and visualization:
from IPython.display import display
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;twitter-access&#34;&gt;Twitter access&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# read json
with open(&#39;api_keys.json&#39;) as f:
  credentials = json.load(f)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# API&#39;s setup:
def twitter_setup():

    # Authentication and access using keys:
    auth = tweepy.OAuthHandler(credentials[&#39;consumer_key&#39;], credentials[&#39;consumer_secret&#39;])
    auth.set_access_token(credentials[&#39;access_token&#39;], credentials[&#39;access_token_secret&#39;])

    # Return API with authentication:
    api = tweepy.API(auth)
    return api
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;get-recent-tweets-of-bolsonaro&#34;&gt;Get recent tweets of Bolsonaro&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_all_tweets(screen_name, credentials):
    #Twitter only allows access to a users most recent 3240 tweets with this method
    
    #authorize twitter, initialize tweepy
    auth = tweepy.OAuthHandler(credentials[&#39;consumer_key&#39;], credentials[&#39;consumer_secret&#39;])
    auth.set_access_token(credentials[&#39;access_token&#39;], credentials[&#39;access_token_secret&#39;])
    api = tweepy.API(auth)
    
    #initialize a list to hold all the tweepy Tweets
    alltweets = []  
    
    #make initial request for most recent tweets (200 is the maximum allowed count)
    new_tweets = api.user_timeline(screen_name = screen_name,count=200)
    
    #save most recent tweets
    alltweets.extend(new_tweets)
    
    #save the id of the oldest tweet less one
    oldest = alltweets[-1].id - 1
    
    #keep grabbing tweets until there are no tweets left to grab
    while len(new_tweets) &amp;gt; 0:
        print(f&amp;quot;getting tweets before {oldest}&amp;quot;)
        
        #all subsiquent requests use the max_id param to prevent duplicates
        new_tweets = api.user_timeline(screen_name = screen_name,count=200,max_id=oldest)
        
        #save most recent tweets
        alltweets.extend(new_tweets)
        
        #update the id of the oldest tweet less one
        oldest = alltweets[-1].id - 1
        
        print(f&amp;quot;...{len(alltweets)} tweets downloaded so far&amp;quot;)
    return alltweets
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# get tweets
# Jair
#alltweets = get_all_tweets(&amp;quot;jairbolsonaro&amp;quot;, credentials)

# get sons&#39; tweets
# Flavio
#alltweets = get_all_tweets(&amp;quot;FlavioBolsonaro&amp;quot;, credentials)
# Carlos
#alltweets = get_all_tweets(&amp;quot;CarlosBolsonaro&amp;quot;, credentials)
# Eduardo
alltweets = get_all_tweets(&amp;quot;BolsonaroSP&amp;quot;, credentials)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;getting tweets before 1259107396909219839
...399 tweets downloaded so far
getting tweets before 1256921349634822147
...599 tweets downloaded so far
getting tweets before 1253107691460886527
...799 tweets downloaded so far
getting tweets before 1250422025174171653
...997 tweets downloaded so far
getting tweets before 1247643770818039807
...1196 tweets downloaded so far
getting tweets before 1244772304640446463
...1395 tweets downloaded so far
getting tweets before 1242815692606451713
...1595 tweets downloaded so far
getting tweets before 1240322132091027456
...1793 tweets downloaded so far
getting tweets before 1238592246045454344
...1992 tweets downloaded so far
getting tweets before 1236135535988662272
...2189 tweets downloaded so far
getting tweets before 1234114139615879168
...2387 tweets downloaded so far
getting tweets before 1230336492654022655
...2587 tweets downloaded so far
getting tweets before 1227285030541631488
...2786 tweets downloaded so far
getting tweets before 1224711822189658118
...2985 tweets downloaded so far
getting tweets before 1221647265393082367
...3182 tweets downloaded so far
getting tweets before 1218929644621238280
...3196 tweets downloaded so far
getting tweets before 1218662810525339647
...3196 tweets downloaded so far
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# save tweets in data frame
data = pd.DataFrame(data=[tweet.text for tweet in alltweets], columns=[&#39;Tweets&#39;])
#data[&#39;Tweets_en&#39;] =  data[&#39;Tweets&#39;].apply(translator.translate)
data[&#39;len&#39;]  = np.array([len(tweet.text) for tweet in alltweets])
data[&#39;ID&#39;]   = np.array([tweet.id for tweet in alltweets])
data[&#39;Date&#39;] = np.array([tweet.created_at for tweet in alltweets])
data[&#39;Source&#39;] = np.array([tweet.source for tweet in alltweets])
data[&#39;Likes&#39;]  = np.array([tweet.favorite_count for tweet in alltweets])
data[&#39;Retweets&#39;]    = np.array([tweet.retweet_count for tweet in alltweets])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.head(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Tweets&lt;/th&gt;
      &lt;th&gt;len&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Source&lt;/th&gt;
      &lt;th&gt;Likes&lt;/th&gt;
      &lt;th&gt;Retweets&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Live com Vereador de Salvador-BA, Alexandre Al...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261469981503631360&lt;/td&gt;
      &lt;td&gt;2020-05-16 01:34:15&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;1364&lt;/td&gt;
      &lt;td&gt;229&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Hoje gravei a nova edição de O Brasil Precisa ...&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;1261462877057118208&lt;/td&gt;
      &lt;td&gt;2020-05-16 01:06:01&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;4324&lt;/td&gt;
      &lt;td&gt;652&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;RT @BolsonaroSP: Exemplo a ser seguido por com...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261432100651102208&lt;/td&gt;
      &lt;td&gt;2020-05-15 23:03:43&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;4053&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;RT @BolsonaroSP: Hoje às 20:00h farei live com...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261432089502552064&lt;/td&gt;
      &lt;td&gt;2020-05-15 23:03:41&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;RT @jairbolsonaro: -Palácio do Planalto (15/05...&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;1261414590056771584&lt;/td&gt;
      &lt;td&gt;2020-05-15 21:54:08&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;5741&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Exemplo a ser seguido por comerciantes para pr...&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;1261414438554472453&lt;/td&gt;
      &lt;td&gt;2020-05-15 21:53:32&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;12722&lt;/td&gt;
      &lt;td&gt;4053&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Hoje às 20:00h farei live com o Vereador de Sa...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261398834191663104&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:51:32&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;1944&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;@Dondiegolaveg4 @jairbolsonaro https://t.co/NQ...&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;1261396631716495360&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:42:47&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;371&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;@GaloVeio_GW @Gilsonmirandaj @jairbolsonaro Kk...&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;1261396533301444609&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:42:23&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Hoje o Governo @JairBolsonaro completa 500 DIA...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261395598718259200&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:38:40&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;28673&lt;/td&gt;
      &lt;td&gt;5626&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# save tweets to csv
data.to_csv(&amp;quot;Bolsonaro_Eduardo_tweets.csv&amp;quot;,encoding=&#39;utf-8-sig&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;visualize-tweets-over-time&#34;&gt;Visualize tweets over time&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# crop data for COVID timeframe
data = data.loc[data[&#39;Date&#39;] &amp;gt; &amp;quot;2020-01-30 00:00:00&amp;quot;]

# Likes vs retweets visualization:
tfav = pd.Series(data=data[&#39;Likes&#39;].values, index=data[&#39;Date&#39;])
tret = pd.Series(data=data[&#39;Retweets&#39;].values, index=data[&#39;Date&#39;])
tfav.plot(figsize=(16,4), label=&amp;quot;Likes&amp;quot;, legend=True)
tret.plot(figsize=(16,4), label=&amp;quot;Retweets&amp;quot;, legend=True);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_13_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tweet_daily = pd.Series(data.groupby(pd.Grouper(key=&#39;Date&#39;, freq=&#39;D&#39;, convention=&#39;start&#39;)).size())
tweet_daily.plot(figsize=(16,4),label=&amp;quot;Daily tweets&amp;quot;, legend=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x21ceb1b1f48&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_14_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;pre-process-tweets-for-topicsentiment-analysis&#34;&gt;Pre-process tweets for topic/sentiment analysis&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop short tweets (likely URLs)
data = data.loc[data[&#39;len&#39;] &amp;gt; 25]

# Drop URLs in Tweets
import re
for index, row in data.iterrows():
    row[&amp;quot;Tweets&amp;quot;] = re.sub(r&#39;http\S+&#39;, &#39;&#39;, row[&amp;quot;Tweets&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2911
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Translate tweets
import requests

def translate(text_to_translate):
    text = {
    &#39;auth_key&#39;: (None, &#39;3387d291-62f1-85c6-e750-e008a06893bf&#39;),
    &#39;text&#39;: (None, text_to_translate),
    &#39;target_lang&#39;: (None, &#39;EN&#39;)
    }
    response = requests.post(&#39;https://api.deepl.com/v2/translate&#39;, files=text)
    translation_json = json.loads(response.text)
    translation = translation_json[&#39;translations&#39;][0][&#39;text&#39;]
    return translation

data[&amp;quot;Tweets_en&amp;quot;] = data[&amp;quot;Tweets&amp;quot;].apply(translate)
# Save translated tweets
data.to_csv(&amp;quot;Bolsonaro_Eduardo_tweets_en.csv&amp;quot;,encoding=&#39;utf-8-sig&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# read in translated tweets
data = pd.read_csv(&amp;quot;Bolsonaro_Eduardo_tweets_en.csv&amp;quot;,encoding=&#39;utf-8-sig&#39;)
#data[&#39;Date&#39;] = pd.to_datetime(data[&#39;Date&#39;], format=&#39;%d-%m-%Y %H:%M&#39;)
#data[&#39;Date&#39;] = data[&#39;Date&#39;].dt.strftime(&#39;%m/%d/%Y %H:%M&#39;)
#data = data.set_index(&#39;Date&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.head(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Unnamed: 0&lt;/th&gt;
      &lt;th&gt;Tweets&lt;/th&gt;
      &lt;th&gt;len&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Source&lt;/th&gt;
      &lt;th&gt;Likes&lt;/th&gt;
      &lt;th&gt;Retweets&lt;/th&gt;
      &lt;th&gt;Tweets_en&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Live com Vereador de Salvador-BA, Alexandre Al...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261469981503631360&lt;/td&gt;
      &lt;td&gt;2020-05-16 01:34:15&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;1364&lt;/td&gt;
      &lt;td&gt;229&lt;/td&gt;
      &lt;td&gt;Live with Salvador-BA Councilman Alexandre All...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Hoje gravei a nova edição de O Brasil Precisa ...&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;1261462877057118208&lt;/td&gt;
      &lt;td&gt;2020-05-16 01:06:01&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;4324&lt;/td&gt;
      &lt;td&gt;652&lt;/td&gt;
      &lt;td&gt;Today I recorded the new edition of O Brasil P...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;RT @BolsonaroSP: Exemplo a ser seguido por com...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261432100651102208&lt;/td&gt;
      &lt;td&gt;2020-05-15 23:03:43&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;4053&lt;/td&gt;
      &lt;td&gt;RT @BolsonaroSP: Example to be followed by tra...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;RT @BolsonaroSP: Hoje às 20:00h farei live com...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261432089502552064&lt;/td&gt;
      &lt;td&gt;2020-05-15 23:03:41&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
      &lt;td&gt;RT @BolsonaroSP: Today at 8:00 pm I&#39;ll do live...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;RT @jairbolsonaro: -Palácio do Planalto (15/05...&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;1261414590056771584&lt;/td&gt;
      &lt;td&gt;2020-05-15 21:54:08&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;5741&lt;/td&gt;
      &lt;td&gt;RT @jairbolsonaro: -PalÃ¡cio do Planalto (15/0...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Exemplo a ser seguido por comerciantes para pr...&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;1261414438554472453&lt;/td&gt;
      &lt;td&gt;2020-05-15 21:53:32&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;12722&lt;/td&gt;
      &lt;td&gt;4053&lt;/td&gt;
      &lt;td&gt;Example to be followed by traders to press gov...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;Hoje às 20:00h farei live com o Vereador de Sa...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261398834191663104&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:51:32&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;1944&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
      &lt;td&gt;Today at 8:00 pm I will live with the Councill...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;@Dondiegolaveg4 @jairbolsonaro https://t.co/NQ...&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;1261396631716495360&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:42:47&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;371&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;@Dondiegolaveg4 @jairbolsonaro https://t.co/NQ...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;@GaloVeio_GW @Gilsonmirandaj @jairbolsonaro Kk...&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;1261396533301444609&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:42:23&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;@GaloVeio_GW @Gilsonmirandaj @jairbolsonaro Kkkkk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;Hoje o Governo @JairBolsonaro completa 500 DIA...&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;1261395598718259200&lt;/td&gt;
      &lt;td&gt;2020-05-15 20:38:40&lt;/td&gt;
      &lt;td&gt;Twitter for iPhone&lt;/td&gt;
      &lt;td&gt;28673&lt;/td&gt;
      &lt;td&gt;5626&lt;/td&gt;
      &lt;td&gt;Today the government @JairBolsonaro completes ...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;tokenize-and-lemmatize-tweets&#34;&gt;Tokenize and lemmatize tweets&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# function to tokenize tweets
import spacy
import re
spacy.load(&#39;en_core_web_sm&#39;)
from spacy.lang.en import English
parser = English()
def tokenize(text):
    lda_tokens = []
    tokens = parser(text)
    for token in tokens:
        if token.orth_.isspace():
            continue
        elif token.like_url:
            lda_tokens.append(&#39;URL&#39;)
        elif token.orth_.startswith(&#39;@&#39;):
            lda_tokens.append(&#39;&#39;)
        else:
            lda_tokens.append(token.lower_)
    return lda_tokens

# function to lemmatize tweets
import nltk
nltk.download(&#39;wordnet&#39;)
from nltk.corpus import wordnet as wn
def get_lemma(word):
    lemma = wn.morphy(word)
    if lemma is None:
        return word
    else:
        return lemma
      
from nltk.stem.wordnet import WordNetLemmatizer
def get_lemma2(word):
    return WordNetLemmatizer().lemmatize(word)

# look up stopwords  
nltk.download(&#39;stopwords&#39;)
en_stop = set(nltk.corpus.stopwords.words(&#39;english&#39;))
# Additional stop words to be removed from text
additional_stop_words=[&#39;twitter&#39;,&#39;com&#39;,&#39;pic&#39;,&#39;rt&#39;,&#39;via&#39;,&#39;youtube&#39;]

# function to clean tweets, i.e. tokenizing and lemmatizing
def prepare_text_for_lda(text):
    tokens = tokenize(text)
    tokens = [token for token in tokens if len(token) &amp;gt; 4]
    tokens = [token for token in tokens if token not in en_stop]
    tokens = [token for token in tokens if token not in additional_stop_words]
    tokens = [get_lemma(token) for token in tokens]
    return tokens

data[&amp;quot;Tweets_processed&amp;quot;] = data[&amp;quot;Tweets_en&amp;quot;].apply(prepare_text_for_lda)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[nltk_data] Downloading package wordnet to
[nltk_data]     C:\Users\chris\AppData\Roaming\nltk_data...
[nltk_data]   Package wordnet is already up-to-date!
[nltk_data] Downloading package stopwords to
[nltk_data]     C:\Users\chris\AppData\Roaming\nltk_data...
[nltk_data]   Package stopwords is already up-to-date!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data[&amp;quot;Tweets_processed&amp;quot;][1:10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1    [today, record, edition, brasil, precisa, sabe...
2    [example, follow, trader, pressure, governor, ...
3    [today, councillor, salvador, alexandre, alelu...
4                  [-palã¡cio, planalto, 15/05, 17:40]
5    [example, follow, trader, press, governor, tra...
6    [today, councillor, salvador, alexandre, alelu...
7                                                   []
8                                              [kkkkk]
9    [today, government, complete, first, brazil, w...
Name: Tweets_processed, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# FIXME: Add bigrams
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;filter-topics-related-to-covid-19&#34;&gt;Filter topics related to Covid-19&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;keywords = [&#39;covid-19&#39;,&#39;vocid-19&#39;, &#39;coronavirus&#39;, &#39;pandemic&#39;, &#39;hospital&#39;,&#39;emergency&#39;,&#39;distancing&#39;,&#39;social&#39;,&#39;distance&#39;,&#39;demonstration&#39;,&#39;test&#39;,&#39;equipment&#39;,&#39;health&#39;,&#39;measure&#39;]
covid_subsample = data[pd.DataFrame(data.Tweets_processed.tolist()).isin(keywords).any(1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;covid_subsample[&amp;quot;Tweets_processed&amp;quot;][1:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10    [difficulty, cause, pandemic, brazilian, agric...
16                           [relative, need, hospital]
23                           [relative, need, hospital]
26    [coronavirus, attack, lung, virus, attack, jou...
Name: Tweets_processed, dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(covid_subsample)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;356
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;lda-topic-analysis&#34;&gt;LDA topic analysis&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_data = covid_subsample[&amp;quot;Tweets_processed&amp;quot;]
from gensim import corpora
dictionary = corpora.Dictionary(text_data)
corpus = [dictionary.doc2bow(text) for text in text_data]
import pickle
pickle.dump(corpus, open(&#39;corpus.pkl&#39;, &#39;wb&#39;))
dictionary.save(&#39;dictionary.gensim&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import gensim
NUM_TOPICS = 4
ldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics = NUM_TOPICS, id2word=dictionary, passes=15)
ldamodel.save(&#39;model5.gensim&#39;)
topics = ldamodel.print_topics(num_words=6)
for topic in topics:
    print(topic)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0, &#39;0.024*&amp;quot;social&amp;quot; + 0.024*&amp;quot;coronavirus&amp;quot; + 0.019*&amp;quot;network&amp;quot; + 0.015*&amp;quot;test&amp;quot; + 0.013*&amp;quot;health&amp;quot; + 0.009*&amp;quot;emergency&amp;quot;&#39;)
(1, &#39;0.018*&amp;quot;pandemic&amp;quot; + 0.018*&amp;quot;people&amp;quot; + 0.013*&amp;quot;covid-19&amp;quot; + 0.012*&amp;quot;government&amp;quot; + 0.012*&amp;quot;coronavirus&amp;quot; + 0.011*&amp;quot;measure&amp;quot;&#39;)
(2, &#39;0.026*&amp;quot;covid-19&amp;quot; + 0.016*&amp;quot;coronavirus&amp;quot; + 0.015*&amp;quot;hydroxychloroquine&amp;quot; + 0.012*&amp;quot;doctor&amp;quot; + 0.010*&amp;quot;health&amp;quot; + 0.009*&amp;quot;demonstration&amp;quot;&#39;)
(3, &#39;0.062*&amp;quot;coronavirus&amp;quot; + 0.022*&amp;quot;president&amp;quot; + 0.018*&amp;quot;health&amp;quot; + 0.018*&amp;quot;measure&amp;quot; + 0.017*&amp;quot;government&amp;quot; + 0.011*&amp;quot;fight&amp;quot;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictionary = gensim.corpora.Dictionary.load(&#39;dictionary.gensim&#39;)
corpus = pickle.load(open(&#39;corpus.pkl&#39;, &#39;rb&#39;))
lda = gensim.models.ldamodel.LdaModel.load(&#39;model5.gensim&#39;)
import pyLDAvis.gensim
lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)
pyLDAvis.display(lda_display)
&lt;/code&gt;&lt;/pre&gt;
&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.css&#34;&gt;
&lt;div id=&#34;ldavis_el786423234483639764619859254&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
&lt;p&gt;var ldavis_el786423234483639764619859254_data = {&amp;ldquo;mdsDat&amp;rdquo;: {&amp;ldquo;x&amp;rdquo;: [0.09331666753072418, 0.004057134324795556, 0.029237589104836426, -0.12661139096035615], &amp;ldquo;y&amp;rdquo;: [0.01985069631040109, -0.1167279040821729, 0.06985568966988137, 0.02702151810189052], &amp;ldquo;topics&amp;rdquo;: [1, 2, 3, 4], &amp;ldquo;cluster&amp;rdquo;: [1, 1, 1, 1], &amp;ldquo;Freq&amp;rdquo;: [24.470203399658203, 19.649639129638672, 16.3651123046875, 39.51504898071289]}, &amp;ldquo;tinfo&amp;rdquo;: {&amp;ldquo;Term&amp;rdquo;: [&amp;ldquo;network&amp;rdquo;, &amp;ldquo;social&amp;rdquo;, &amp;ldquo;people&amp;rdquo;, &amp;ldquo;president&amp;rdquo;, &amp;ldquo;hydroxychloroquine&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;test&amp;rdquo;, &amp;ldquo;doctor&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;measure&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;case&amp;rdquo;, &amp;ldquo;brazil&amp;rdquo;, &amp;ldquo;combat&amp;rdquo;, &amp;ldquo;billion&amp;rdquo;, &amp;ldquo;treatment&amp;rdquo;, &amp;ldquo;fight&amp;rdquo;, &amp;ldquo;arrest&amp;rdquo;, &amp;ldquo;take&amp;rdquo;, &amp;ldquo;witzel&amp;rdquo;, &amp;ldquo;street&amp;rdquo;, &amp;ldquo;negative&amp;rdquo;, &amp;ldquo;vocid-19&amp;rdquo;, &amp;ldquo;office&amp;rdquo;, &amp;ldquo;bolsonaro&amp;rdquo;, &amp;ldquo;science&amp;rdquo;, &amp;ldquo;prevent&amp;rdquo;, &amp;ldquo;positive&amp;rdquo;, &amp;ldquo;advisor&amp;rdquo;, &amp;ldquo;phares&amp;rdquo;, &amp;ldquo;network&amp;rdquo;, &amp;ldquo;defend&amp;rdquo;, &amp;ldquo;shooting&amp;rdquo;, &amp;ldquo;pistol&amp;rdquo;, &amp;ldquo;thing&amp;rdquo;, &amp;ldquo;anyone&amp;rdquo;, &amp;ldquo;profile&amp;rdquo;, &amp;ldquo;provide&amp;rdquo;, &amp;ldquo;money&amp;rdquo;, &amp;ldquo;defense&amp;rdquo;, &amp;ldquo;social&amp;rdquo;, &amp;ldquo;positive&amp;rdquo;, &amp;ldquo;collapse&amp;rdquo;, &amp;ldquo;13,979&amp;rdquo;, &amp;ldquo;control&amp;rdquo;, &amp;ldquo;average&amp;rdquo;, &amp;ldquo;approve&amp;rdquo;, &amp;ldquo;flexibility&amp;rdquo;, &amp;ldquo;recife&amp;rdquo;, &amp;ldquo;capital&amp;rdquo;, &amp;ldquo;expenditure&amp;rdquo;, &amp;ldquo;question&amp;rdquo;, &amp;ldquo;criticize&amp;rdquo;, &amp;ldquo;phone&amp;rdquo;, &amp;ldquo;camuflagem&amp;rdquo;, &amp;ldquo;sauer&amp;rdquo;, &amp;ldquo;recently&amp;rdquo;, &amp;ldquo;coming&amp;rdquo;, &amp;ldquo;stadium&amp;rdquo;, &amp;ldquo;become&amp;rdquo;, &amp;ldquo;medium&amp;rdquo;, &amp;ldquo;test&amp;rdquo;, &amp;ldquo;arrive&amp;rdquo;, &amp;ldquo;would&amp;rdquo;, &amp;ldquo;state&amp;rdquo;, &amp;ldquo;press&amp;rdquo;, &amp;ldquo;attack&amp;rdquo;, &amp;ldquo;emergency&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;brasilia&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;congress&amp;rdquo;, &amp;ldquo;still&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, &amp;ldquo;world&amp;rdquo;, &amp;ldquo;already&amp;rdquo;, &amp;ldquo;always&amp;rdquo;, &amp;ldquo;support&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;federal&amp;rdquo;, &amp;ldquo;release&amp;rdquo;, &amp;ldquo;president&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;distance&amp;rdquo;, &amp;ldquo;science&amp;rdquo;, &amp;ldquo;prevent&amp;rdquo;, &amp;ldquo;elderly&amp;rdquo;, &amp;ldquo;study&amp;rdquo;, &amp;ldquo;60000&amp;rdquo;, &amp;ldquo;prudent&amp;rdquo;, &amp;ldquo;flag&amp;rdquo;, &amp;ldquo;overcrowd&amp;rdquo;, &amp;ldquo;preach&amp;rdquo;, &amp;ldquo;child&amp;rdquo;, &amp;ldquo;want&amp;rdquo;, &amp;ldquo;birthday&amp;rdquo;, &amp;ldquo;security&amp;rdquo;, &amp;ldquo;-found&amp;rdquo;, &amp;ldquo;confrontation&amp;rdquo;, &amp;ldquo;natural&amp;rdquo;, &amp;ldquo;-citizens&amp;rdquo;, &amp;ldquo;protection&amp;rdquo;, &amp;ldquo;serious&amp;rdquo;, &amp;ldquo;spend&amp;rdquo;, &amp;ldquo;start&amp;rdquo;, &amp;ldquo;everything&amp;rdquo;, &amp;ldquo;think&amp;rdquo;, &amp;ldquo;demand&amp;rdquo;, &amp;ldquo;website&amp;rdquo;, &amp;ldquo;technology&amp;rdquo;, &amp;ldquo;destoa&amp;rdquo;, &amp;ldquo;revenue&amp;rdquo;, &amp;ldquo;dealer&amp;rdquo;, &amp;ldquo;seize&amp;rdquo;, &amp;ldquo;people&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;brazil&amp;rdquo;, &amp;ldquo;number&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;measure&amp;rdquo;, &amp;ldquo;federal&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;fight&amp;rdquo;, &amp;ldquo;minister&amp;rdquo;, &amp;ldquo;today&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;social&amp;rdquo;, &amp;ldquo;without&amp;rdquo;, &amp;ldquo;infect&amp;rdquo;, &amp;ldquo;always&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;covid&amp;rdquo;, &amp;ldquo;speech&amp;rdquo;, &amp;ldquo;medical&amp;rdquo;, &amp;ldquo;presence&amp;rdquo;, &amp;ldquo;suspicion&amp;rdquo;, &amp;ldquo;governor&amp;rdquo;, &amp;ldquo;quarantine&amp;rdquo;, &amp;ldquo;distance&amp;rdquo;, &amp;ldquo;street&amp;rdquo;, &amp;ldquo;negative&amp;rdquo;, &amp;ldquo;vocid-19&amp;rdquo;, &amp;ldquo;advisor&amp;rdquo;, &amp;ldquo;phares&amp;rdquo;, &amp;ldquo;courage&amp;rdquo;, &amp;ldquo;doctor&amp;rdquo;, &amp;ldquo;hydroxychloroquine&amp;rdquo;, &amp;ldquo;consider&amp;rdquo;, &amp;ldquo;case&amp;rdquo;, &amp;ldquo;price&amp;rdquo;, &amp;ldquo;protect&amp;rdquo;, &amp;ldquo;26-year&amp;rdquo;, &amp;ldquo;energy&amp;rdquo;, &amp;ldquo;try&amp;rdquo;, &amp;ldquo;covidan&amp;rdquo;, &amp;ldquo;lastly&amp;rdquo;, &amp;ldquo;relative&amp;rdquo;, &amp;ldquo;inflate&amp;rdquo;, &amp;ldquo;afraid&amp;rdquo;, &amp;ldquo;malaysia&amp;rdquo;, &amp;ldquo;since&amp;rdquo;, &amp;ldquo;-secretary&amp;rdquo;, &amp;ldquo;1,000&amp;rdquo;, &amp;ldquo;demonstrate&amp;rdquo;, &amp;ldquo;comparison&amp;rdquo;, &amp;ldquo;office&amp;rdquo;, &amp;ldquo;singer&amp;rdquo;, &amp;ldquo;baianos&amp;rdquo;, &amp;ldquo;timel&amp;rdquo;, &amp;ldquo;respirator&amp;rdquo;, &amp;ldquo;arrest&amp;rdquo;, &amp;ldquo;works&amp;rdquo;, &amp;ldquo;treatment&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;witzel&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;test&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;epidemic&amp;rdquo;, &amp;ldquo;report&amp;rdquo;, &amp;ldquo;never&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;article&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;emergency&amp;rdquo;, &amp;ldquo;bolsonaro&amp;rdquo;, &amp;ldquo;place&amp;rdquo;, &amp;ldquo;take&amp;rdquo;, &amp;ldquo;video&amp;rdquo;, &amp;ldquo;contract&amp;rdquo;, &amp;ldquo;teich&amp;rdquo;, &amp;ldquo;nelson&amp;rdquo;, &amp;ldquo;announce&amp;rdquo;, &amp;ldquo;combat&amp;rdquo;, &amp;ldquo;billion&amp;rdquo;, &amp;ldquo;little&amp;rdquo;, &amp;ldquo;march&amp;rdquo;, &amp;ldquo;campaign&amp;rdquo;, &amp;ldquo;president&amp;rdquo;, &amp;ldquo;spoke&amp;rdquo;, &amp;ldquo;globo&amp;rdquo;, &amp;ldquo;videoconference&amp;rdquo;, &amp;ldquo;prevention&amp;rdquo;, &amp;ldquo;result&amp;rdquo;, &amp;ldquo;check&amp;rdquo;, &amp;ldquo;doria&amp;rdquo;, &amp;ldquo;country&amp;rdquo;, &amp;ldquo;situation&amp;rdquo;, &amp;ldquo;delivery&amp;rdquo;, &amp;ldquo;15,000&amp;rdquo;, &amp;ldquo;3,000&amp;rdquo;, &amp;ldquo;watch&amp;rdquo;, &amp;ldquo;thousand&amp;rdquo;, &amp;ldquo;bolsonaro&amp;rdquo;, &amp;ldquo;secret&amp;rdquo;, &amp;ldquo;record&amp;rdquo;, &amp;ldquo;decide&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;measure&amp;rdquo;, &amp;ldquo;corona&amp;rdquo;, &amp;ldquo;fight&amp;rdquo;, &amp;ldquo;action&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;minister&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;release&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;support&amp;rdquo;, &amp;ldquo;share&amp;rdquo;, &amp;ldquo;paulo&amp;rdquo;, &amp;ldquo;trump&amp;rdquo;, &amp;ldquo;today&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;emergency&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;death&amp;rdquo;], &amp;ldquo;Freq&amp;rdquo;: [12.0, 20.0, 13.0, 26.0, 8.0, 33.0, 14.0, 6.0, 20.0, 25.0, 92.0, 4.0, 11.0, 11.0, 11.0, 6.0, 16.0, 6.0, 8.0, 7.0, 3.0, 3.0, 3.0, 3.0, 13.0, 3.0, 3.0, 4.0, 2.0, 2.0, 11.969191551208496, 2.9692983627319336, 2.967947006225586, 2.9679315090179443, 2.967642068862915, 2.962177276611328, 2.2705984115600586, 2.26706862449646, 2.2632815837860107, 2.2594943046569824, 15.54395866394043, 3.6728954315185547, 2.098874807357788, 1.5718984603881836, 1.5718973875045776, 1.5718960762023926, 1.571895718574524, 1.5718954801559448, 1.5718951225280762, 1.5718947649002075, 1.5718940496444702, 1.5718930959701538, 1.5718905925750732, 1.5718870162963867, 1.5718847513198853, 1.5718810558319092, 1.5718793869018555, 1.571874976158142, 1.571864128112793, 1.5718398094177246, 3.6517844200134277, 9.811744689941406, 2.9735989570617676, 3.6851511001586914, 3.657034397125244, 3.432622194290161, 2.2784323692321777, 5.576033592224121, 15.364423751831055, 8.260237693786621, 2.9816362857818604, 5.07114315032959, 2.2706243991851807, 2.2684030532836914, 2.2553746700286865, 2.27921199798584, 2.9696202278137207, 2.5602970123291016, 3.3759515285491943, 5.028782367706299, 3.187826633453369, 2.977470874786377, 3.652317762374878, 3.7548177242279053, 2.9509401321411133, 2.278872013092041, 2.8293302059173584, 2.8259694576263428, 2.163754940032959, 2.1471714973449707, 1.4979556798934937, 1.4979532957077026, 1.4979493618011475, 1.4979486465454102, 1.4979485273361206, 1.497946858406067, 1.4979461431503296, 1.4979413747787476, 1.4979413747787476, 1.497941017150879, 1.4979407787322998, 1.4979404211044312, 1.4979356527328491, 1.4979265928268433, 1.4979169368743896, 1.4979157447814941, 1.497912049293518, 1.4979093074798584, 1.497908592224121, 1.4978998899459839, 1.4978547096252441, 1.4977227449417114, 1.4970115423202515, 1.4965927600860596, 1.4965829849243164, 1.4965721368789673, 9.445122718811035, 9.459224700927734, 5.526413917541504, 2.1551568508148193, 6.925489902496338, 6.425810813903809, 5.561095714569092, 3.239954710006714, 3.184537410736084, 5.507724761962891, 3.6625351905822754, 3.1077077388763428, 2.8441126346588135, 3.5040841102600098, 6.083441257476807, 3.3045806884765625, 2.1735339164733887, 2.176668882369995, 1.867630124092102, 2.1615962982177734, 1.5056294202804565, 1.5045444965362549, 1.5035334825515747, 1.5032459497451782, 1.502978801727295, 1.5068668127059937, 1.506690502166748, 1.5049628019332886, 2.6797733306884766, 2.6746068000793457, 2.6550285816192627, 2.0567429065704346, 2.0567357540130615, 2.0553698539733887, 5.115640640258789, 6.5093607902526855, 1.9274297952651978, 3.3346312046051025, 1.4238953590393066, 1.4238927364349365, 1.4238871335983276, 1.4238840341567993, 1.4238804578781128, 1.4238784313201904, 1.423833966255188, 1.4237723350524902, 1.4222509860992432, 1.4203354120254517, 1.4204788208007812, 1.4203989505767822, 1.416504979133606, 1.4165027141571045, 1.40654456615448, 1.3865652084350586, 2.702932596206665, 0.7910041213035583, 0.7910033464431763, 0.7910033464431763, 1.8358712196350098, 3.3313181400299072, 1.425106406211853, 2.9689927101135254, 11.07068920135498, 2.6712400913238525, 3.974093437194824, 3.389704465866089, 7.016455173492432, 3.3223085403442383, 4.247829437255859, 2.063446283340454, 2.058943033218384, 2.0717885494232178, 2.6870601177215576, 1.7378450632095337, 2.0614445209503174, 1.7528276443481445, 1.6694772243499756, 1.4424687623977661, 7.758479595184326, 4.733194351196289, 4.733081340789795, 4.730428218841553, 4.724939823150635, 4.701956272125244, 10.06789779663086, 10.043389320373535, 3.9757847785949707, 3.218480110168457, 3.2181215286254883, 22.89010238647461, 2.4611079692840576, 2.461091995239258, 2.461050033569336, 2.4590845108032227, 2.4573867321014404, 2.4513943195343018, 5.496762275695801, 5.497840404510498, 2.4176268577575684, 2.4147489070892334, 2.41471791267395, 2.4147098064422607, 4.738451957702637, 2.379364013671875, 11.165138244628906, 1.7037982940673828, 1.7037937641143799, 1.7037912607192993, 64.21432495117188, 18.311147689819336, 7.024102687835693, 11.994039535522461, 6.230185508728027, 17.306949615478516, 8.194271087646484, 19.08055305480957, 6.264878273010254, 9.277922630310059, 6.347862243652344, 3.981909990310669, 3.219810724258423, 3.222810983657837, 5.501864910125732, 11.914777755737305, 6.04581356048584, 7.094889163970947, 5.475218296051025, 4.34887170791626], &amp;ldquo;Total&amp;rdquo;: [12.0, 20.0, 13.0, 26.0, 8.0, 33.0, 14.0, 6.0, 20.0, 25.0, 92.0, 4.0, 11.0, 11.0, 11.0, 6.0, 16.0, 6.0, 8.0, 7.0, 3.0, 3.0, 3.0, 3.0, 13.0, 3.0, 3.0, 4.0, 2.0, 2.0, 12.561468124389648, 3.48340106010437, 3.4835004806518555, 3.483499765396118, 3.4835267066955566, 3.482820987701416, 2.7846996784210205, 2.784468412399292, 2.783989667892456, 2.7837255001068115, 20.012794494628906, 4.815404415130615, 2.7684686183929443, 2.08599591255188, 2.085996627807617, 2.085995674133301, 2.085995674133301, 2.08599591255188, 2.085996150970459, 2.08599591255188, 2.0859954357147217, 2.085995674133301, 2.085995674133301, 2.0859951972961426, 2.085994243621826, 2.085994243621826, 2.085994005203247, 2.085994243621826, 2.0859928131103516, 2.0859899520874023, 4.935197353363037, 14.968985557556152, 4.240230083465576, 6.2036261558532715, 6.265993595123291, 6.305426120758057, 3.5412206649780273, 13.552291870117188, 92.67864227294922, 37.096343994140625, 6.408073425292969, 17.37275505065918, 4.050435543060303, 4.116152763366699, 4.11503791809082, 4.206917762756348, 7.270017623901367, 5.4320220947265625, 10.86260986328125, 29.584049224853516, 9.857355117797852, 10.17869758605957, 26.899085998535156, 33.665771484375, 18.364551544189453, 4.871782302856445, 3.3519210815429688, 3.352262020111084, 2.6860692501068115, 2.685305595397949, 2.020251750946045, 2.020251512527466, 2.0202512741088867, 2.0202512741088867, 2.020251750946045, 2.0202512741088867, 2.0202507972717285, 2.0202505588531494, 2.0202507972717285, 2.0202510356903076, 2.0202510356903076, 2.0202507972717285, 2.0202507972717285, 2.020249605178833, 2.020249843597412, 2.020249843597412, 2.020249128341675, 2.020249366760254, 2.0202488899230957, 2.0202488899230957, 2.0202465057373047, 2.0202832221984863, 2.020291566848755, 2.020346164703369, 2.02034330368042, 2.0203332901000977, 13.68616771697998, 20.763633728027344, 11.894487380981445, 3.320558786392212, 33.665771484375, 29.584049224853516, 25.578767776489258, 9.857355117797852, 10.445367813110352, 37.096343994140625, 16.800739288330078, 12.34029769897461, 9.98554801940918, 17.37275505065918, 92.67864227294922, 20.012794494628906, 6.295209884643555, 7.677928447723389, 5.4320220947265625, 18.364551544189453, 2.776247501373291, 2.7765204906463623, 2.7766637802124023, 2.7767043113708496, 2.776730537414551, 6.382038593292236, 4.930583953857422, 4.871782302856445, 3.221454620361328, 3.2231173515319824, 3.2254631519317627, 2.587334156036377, 2.5873348712921143, 2.587606191635132, 6.478824615478516, 8.413235664367676, 2.594069480895996, 4.551112651824951, 1.9544305801391602, 1.9544308185577393, 1.954431176185608, 1.954431176185608, 1.9544312953948975, 1.9544310569763184, 1.954443335533142, 1.9544322490692139, 1.9547486305236816, 1.9547251462936401, 1.9550905227661133, 1.9551061391830444, 1.9558802843093872, 1.9558809995651245, 1.9561676979064941, 1.9616857767105103, 3.974799156188965, 1.3215265274047852, 1.3215264081954956, 1.3215265274047852, 3.3879716396331787, 6.696798801422119, 2.6201000213623047, 6.192168235778809, 33.665771484375, 7.010533332824707, 18.364551544189453, 14.968985557556152, 92.67864227294922, 17.37275505065918, 37.096343994140625, 5.614768981933594, 5.616025924682617, 7.525625705718994, 20.763633728027344, 4.119144439697266, 10.445367813110352, 13.552291870117188, 13.958045959472656, 4.163941383361816, 8.261680603027344, 5.23272180557251, 5.232701301574707, 5.232457637786865, 5.232053279876709, 5.227805137634277, 11.235363960266113, 11.232739448547363, 4.475346088409424, 3.717989683151245, 3.7179436683654785, 26.899085998535156, 2.960620403289795, 2.9606170654296875, 2.960608959197998, 2.960444211959839, 2.9600272178649902, 2.9595611095428467, 6.656572341918945, 6.689100742340088, 2.955324411392212, 2.952975273132324, 2.952970504760742, 2.9529690742492676, 5.866414546966553, 2.9471471309661865, 13.958045959472656, 2.2032601833343506, 2.2032597064971924, 2.203259229660034, 92.67864227294922, 25.578767776489258, 9.53664779663086, 16.800739288330078, 8.743877410888672, 29.584049224853516, 12.34029769897461, 37.096343994140625, 10.17869758605957, 18.364551544189453, 10.86260986328125, 5.774742126464844, 4.383875846862793, 4.41689920425415, 9.98554801940918, 33.665771484375, 13.552291870117188, 20.763633728027344, 17.37275505065918, 10.445367813110352], &amp;ldquo;Category&amp;rdquo;: [&amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Default&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic1&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic2&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic3&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;, &amp;ldquo;Topic4&amp;rdquo;], &amp;ldquo;logprob&amp;rdquo;: [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -3.9885001182556152, -5.382500171661377, -5.382900238037109, -5.382999897003174, -5.3831000328063965, -5.384900093078613, -5.6508002281188965, -5.652299880981445, -5.6539998054504395, -5.655700206756592, -3.727099895477295, -5.1697998046875, -5.729400157928467, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018499851226807, -6.018599987030029, -6.018599987030029, -6.018599987030029, -5.175600051879883, -4.18720006942749, -5.38100004196167, -5.166500091552734, -5.174200057983398, -5.237500190734863, -5.647299766540527, -4.752299785614014, -3.738800048828125, -4.359399795532227, -5.378300189971924, -4.847300052642822, -5.6508002281188965, -5.651700019836426, -5.65749979019165, -5.646999835968018, -5.382400035858154, -5.530700206756592, -5.2540998458862305, -4.855599880218506, -5.311500072479248, -5.379700183868408, -5.17549991607666, -5.147799968719482, -5.388700008392334, -5.64709997177124, -5.211400032043457, -5.212600231170654, -5.479599952697754, -5.487299919128418, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847300052642822, -5.847400188446045, -5.847400188446045, -5.847400188446045, -5.847400188446045, -5.847400188446045, -5.847499847412109, -5.8480000495910645, -5.848199844360352, -5.848199844360352, -5.848199844360352, -4.005899906158447, -4.00439977645874, -4.541900157928467, -5.48360013961792, -4.316199779510498, -4.39109992980957, -4.535600185394287, -5.075900077819824, -5.093100070953369, -4.545300006866455, -4.9532999992370605, -5.117499828338623, -5.206200122833252, -4.997499942779541, -4.445899963378906, -5.056099891662598, -5.475100040435791, -5.473599910736084, -5.626800060272217, -5.480599880218506, -5.842199802398682, -5.842899799346924, -5.843599796295166, -5.843800067901611, -5.843999862670898, -5.841400146484375, -5.8414998054504395, -5.842700004577637, -5.082799911499023, -5.084700107574463, -5.092100143432617, -5.347400188446045, -5.347400188446045, -5.348100185394287, -4.436200141906738, -4.195300102233887, -5.412300109863281, -4.864200115203857, -5.715099811553955, -5.715099811553955, -5.715099811553955, -5.715099811553955, -5.715099811553955, -5.715099811553955, -5.715199947357178, -5.715199947357178, -5.716300010681152, -5.717599868774414, -5.71750020980835, -5.717599868774414, -5.720300197601318, -5.720300197601318, -5.727399826049805, -5.741700172424316, -5.07420015335083, -6.302999973297119, -6.302999973297119, -6.302999973297119, -5.460999965667725, -4.865099906921387, -5.714300155639648, -4.980299949645996, -3.6642000675201416, -5.085999965667725, -4.688700199127197, -4.847799777984619, -4.120299816131592, -4.8678998947143555, -4.622099876403809, -5.344099998474121, -5.34630012512207, -5.340099811553955, -5.080100059509277, -5.515900135040283, -5.345099925994873, -5.507299900054932, -5.556000232696533, -5.702199935913086, -4.901299953460693, -5.395400047302246, -5.395500183105469, -5.395999908447266, -5.397200107574463, -5.402100086212158, -4.640699863433838, -4.643099784851074, -5.569799900054932, -5.781099796295166, -5.781199932098389, -3.8192999362945557, -6.0493998527526855, -6.0493998527526855, -6.049499988555908, -6.050300121307373, -6.050899982452393, -6.053400039672852, -5.2459001541137695, -5.245699882507324, -6.067299842834473, -6.068399906158447, -6.06850004196167, -6.06850004196167, -5.3942999839782715, -6.083199977874756, -4.537199974060059, -6.417200088500977, -6.417200088500977, -6.417200088500977, -2.7878000736236572, -4.042500019073486, -5.000699996948242, -4.46560001373291, -5.12060022354126, -4.098899841308594, -4.84660005569458, -4.001399993896484, -5.115099906921387, -4.722400188446045, -5.101900100708008, -5.568299770355225, -5.780700206756592, -5.779799938201904, -5.244999885559082, -4.472300052642822, -5.150700092315674, -4.990699768066406, -5.249800205230713, -5.480100154876709], &amp;ldquo;loglift&amp;rdquo;: [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.3594000339508057, 1.2480000257492065, 1.247499942779541, 1.247499942779541, 1.2474000453948975, 1.2458000183105469, 1.2036000490188599, 1.2021000385284424, 1.200600028038025, 1.1991000175476074, 1.1549999713897705, 1.1368999481201172, 1.1308000087738037, 1.1247999668121338, 1.1247999668121338, 1.1247999668121338, 1.1247999668121338, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1246999502182007, 1.1065000295639038, 0.9853000044822693, 1.052899956703186, 0.886900007724762, 0.8691999912261963, 0.7996000051498413, 0.96670001745224, 0.519599974155426, -0.38940000534057617, -0.09440000355243683, 0.6425999999046326, 0.17640000581741333, 0.8288999795913696, 0.8119000196456909, 0.8064000010490417, 0.7947999835014343, 0.5123999714851379, 0.6554999947547913, 0.23909999430179596, -0.364300012588501, 0.27880001068115234, 0.1784999966621399, -0.5889999866485596, -0.7857000231742859, -0.4205999970436096, 0.6478999853134155, 1.4575999975204468, 1.4563000202178955, 1.4108999967575073, 1.403499960899353, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279999494552612, 1.3279000520706177, 1.3278000354766846, 1.327299952507019, 1.3270000219345093, 1.3270000219345093, 1.3270000219345093, 1.2561999559402466, 0.8409000039100647, 0.8605999946594238, 1.1948000192642212, 0.04580000042915344, 0.10019999742507935, 0.10109999775886536, 0.5145000219345093, 0.439300000667572, -0.28029999136924744, 0.10379999876022339, 0.24809999763965607, 0.37119999527931213, 0.026100000366568565, -1.096500039100647, -0.17399999499320984, 0.5637000203132629, 0.36660000681877136, 0.559499979019165, -0.512499988079071, 1.0152000188827515, 1.0144000053405762, 1.013700008392334, 1.0134999752044678, 1.0132999420166016, 0.18369999527931213, 0.4415999948978424, 0.45239999890327454, 1.6259000301361084, 1.6234999895095825, 1.615399956703186, 1.5805000066757202, 1.5805000066757202, 1.579699993133545, 1.573799967765808, 1.5535000562667847, 1.5130000114440918, 1.4989999532699585, 1.493299961090088, 1.493299961090088, 1.493299961090088, 1.493299961090088, 1.493299961090088, 1.493299961090088, 1.493299961090088, 1.4931999444961548, 1.4919999837875366, 1.4907000064849854, 1.4905999898910522, 1.4904999732971191, 1.4874000549316406, 1.4874000549316406, 1.4802000522613525, 1.4630000591278076, 1.424399971961975, 1.2968000173568726, 1.2968000173568726, 1.2968000173568726, 1.1972999572753906, 1.111799955368042, 1.2010999917984009, 1.0750000476837158, 0.6977999806404114, 0.8450999855995178, 0.2793999910354614, 0.3248000144958496, -0.7709000110626221, 0.155799999833107, -0.3571000099182129, 0.8090000152587891, 0.8065999746322632, 0.5200999975204468, -0.23469999432563782, 0.9470000267028809, 0.18729999661445618, -0.2353000044822693, -0.31349998712539673, 0.7498999834060669, 0.8655999898910522, 0.8281999826431274, 0.8281000256538391, 0.8276000022888184, 0.8264999985694885, 0.8224999904632568, 0.8187999725341797, 0.8166000247001648, 0.8101000189781189, 0.7842000126838684, 0.7840999960899353, 0.7670999765396118, 0.7437000274658203, 0.7437000274658203, 0.7437000274658203, 0.742900013923645, 0.7423999905586243, 0.7401000261306763, 0.7369999885559082, 0.7324000000953674, 0.7276999950408936, 0.7272999882698059, 0.7272999882698059, 0.7272999882698059, 0.7149999737739563, 0.7145000100135803, 0.7052000164985657, 0.6714000105857849, 0.6714000105857849, 0.6714000105857849, 0.5616000294685364, 0.5942000150680542, 0.6226999759674072, 0.5914999842643738, 0.5895000100135803, 0.39239999651908875, 0.51910001039505, 0.2635999917984009, 0.4431999921798706, 0.24570000171661377, 0.3912999927997589, 0.5568000078201294, 0.6198999881744385, 0.6133000254631042, 0.33239999413490295, -0.11020000278949738, 0.12129999697208405, -0.1453000009059906, -0.22619999945163727, 0.05220000073313713]}, &amp;ldquo;token.table&amp;rdquo;: {&amp;ldquo;Topic&amp;rdquo;: [2, 2, 3, 3, 1, 4, 3, 4, 2, 1, 2, 3, 4, 3, 3, 1, 4, 1, 2, 3, 4, 1, 1, 2, 3, 4, 1, 4, 3, 4, 1, 4, 1, 3, 1, 1, 4, 2, 1, 3, 4, 1, 2, 4, 1, 2, 4, 4, 1, 1, 1, 3, 4, 2, 1, 1, 4, 1, 3, 2, 1, 3, 3, 4, 1, 1, 2, 4, 1, 2, 3, 4, 1, 4, 3, 2, 4, 1, 2, 3, 4, 3, 1, 2, 1, 2, 3, 4, 4, 1, 1, 4, 2, 3, 1, 2, 3, 4, 2, 1, 2, 4, 1, 3, 2, 4, 2, 1, 3, 4, 3, 3, 4, 2, 1, 1, 2, 4, 1, 2, 4, 2, 1, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 3, 1, 2, 3, 4, 3, 3, 4, 3, 4, 1, 2, 4, 2, 4, 1, 4, 1, 2, 4, 1, 2, 3, 4, 1, 1, 2, 3, 4, 2, 3, 3, 4, 2, 1, 2, 3, 4, 2, 4, 2, 3, 4, 3, 1, 1, 1, 3, 4, 1, 3, 2, 2, 4, 1, 4, 1, 3, 4, 2, 4, 3, 1, 3, 2, 1, 2, 1, 2, 4, 1, 1, 1, 4, 3, 1, 3, 4, 3, 4, 3, 4, 4, 2, 1, 2, 4, 2, 2, 2, 2, 3, 4, 1, 3, 3, 4, 1, 2, 3, 2, 4, 2, 4, 1, 2, 1, 2, 4, 1, 2, 3, 2, 1, 3, 4, 2, 4, 1, 2, 4, 2, 4, 1, 2, 3, 1, 2, 4, 3, 1, 2, 3, 4, 3, 4, 1, 4, 3, 4, 4, 3, 2, 3, 4, 2, 1, 2, 4, 3, 4, 2, 3, 1, 2, 4, 1, 3, 4], &amp;ldquo;Freq&amp;rdquo;: [0.4949880540370941, 0.49498799443244934, 0.5112787485122681, 0.5112785696983337, 0.9587746262550354, 0.6772841215133667, 0.5116578340530396, 0.6772844195365906, 0.494987815618515, 0.11436574161052704, 0.11436574161052704, 0.11436574161052704, 0.6861944198608398, 0.7729964256286621, 0.5115808844566345, 0.41265374422073364, 0.5502049922943115, 0.5522805452346802, 0.3681870102882385, 0.18409350514411926, 0.9564242959022522, 0.8613707423210144, 0.958774745464325, 0.14932507276535034, 0.447975218296051, 0.2986501455307007, 0.7075088024139404, 0.23583625257015228, 0.48553770780563354, 0.48553770780563354, 0.5647770166397095, 0.28238850831985474, 0.958774745464325, 0.7567007541656494, 0.9587773680686951, 0.08902547508478165, 0.8902547955513, 0.4949881136417389, 0.07164326310157776, 0.14328652620315552, 0.7880759239196777, 0.46815943717956543, 0.15605314075946808, 0.31210628151893616, 0.16814512014389038, 0.5044353604316711, 0.33629024028778076, 0.8068976402282715, 0.9587754011154175, 0.9587746262550354, 0.21972648799419403, 0.6591794490814209, 0.6757758855819702, 0.49498793482780457, 0.7224210500717163, 0.08900468051433563, 0.8900468349456787, 0.9587754011154175, 0.509765625, 0.49498799443244934, 0.49377405643463135, 0.24688702821731567, 0.7709893584251404, 0.9555293917655945, 0.9587743282318115, 0.1048586517572403, 0.1048586517572403, 0.7340105175971985, 0.16184958815574646, 0.06473983824253082, 0.0755298063158989, 0.6905582547187805, 0.149496927857399, 0.7474846243858337, 0.7729151248931885, 0.720396876335144, 0.360198438167572, 0.11881504207849503, 0.20792631804943085, 0.32674136757850647, 0.3564451336860657, 0.5116578340530396, 0.958774745464325, 0.4949653744697571, 0.09573622047901154, 0.2872086465358734, 0.19147244095802307, 0.38294488191604614, 0.9077461361885071, 0.86122727394104, 0.7184616327285767, 0.677282989025116, 0.4949885308742523, 0.5112035870552063, 0.1633581966161728, 0.10890546441078186, 0.21781092882156372, 0.4900745749473572, 0.49497807025909424, 0.41052737832069397, 0.41052737832069397, 0.20526368916034698, 0.15434898436069489, 0.7717449069023132, 0.15022747218608856, 0.7511373162269592, 0.7445824146270752, 0.44272953271865845, 0.14757651090621948, 0.44272953271865845, 0.5116578340530396, 0.35620343685150146, 0.5343051552772522, 0.49498841166496277, 0.9587748646736145, 0.30434128642082214, 0.30434128642082214, 0.30434128642082214, 0.05952119082212448, 0.23808476328849792, 0.7142542600631714, 0.49498793482780457, 0.9587746262550354, 0.6755348443984985, 0.1690099984407425, 0.20281198620796204, 0.03380199894309044, 0.5746339559555054, 0.15668974816799164, 0.3133794963359833, 0.15668974816799164, 0.4700692296028137, 0.2156546711921692, 0.1617410033941269, 0.1078273355960846, 0.5121798515319824, 0.2878069579601288, 0.23024557530879974, 0.1726841777563095, 0.2878069579601288, 0.23772066831588745, 0.8320223093032837, 0.1302434653043747, 0.2604869306087494, 0.1302434653043747, 0.3907303810119629, 0.5115747451782227, 0.5116546154022217, 0.8937855958938599, 0.5114852786064148, 0.806887686252594, 0.07818984985351562, 0.23456954956054688, 0.7037086486816406, 0.720288872718811, 0.3601444363594055, 0.8105045557022095, 0.20262613892555237, 0.0810353234410286, 0.2431059628725052, 0.6482825875282288, 0.7183934450149536, 0.4949880540370941, 0.9307759404182434, 0.9556477665901184, 0.955302357673645, 0.2657586336135864, 0.2657586336135864, 0.2657586336135864, 0.2657586336135864, 0.6023082733154297, 0.30115413665771484, 0.7547551393508911, 0.2515850365161896, 0.49498793482780457, 0.09632225334644318, 0.4334501326084137, 0.14448338747024536, 0.3371278941631317, 0.22810864448547363, 0.6843259334564209, 0.6575982570648193, 0.07306647300720215, 0.21919941902160645, 0.772996187210083, 0.958774983882904, 0.8612028956413269, 0.2401570826768875, 0.2401570826768875, 0.480314165353775, 0.8306674957275391, 0.20766687393188477, 0.494987815618515, 0.7202783226966858, 0.3601391613483429, 0.148703932762146, 0.8550476431846619, 0.4757806956768036, 0.1585935652256012, 0.3171871304512024, 0.8949180841445923, 0.6755743026733398, 0.5116579532623291, 0.7182102799415588, 0.5116578936576843, 0.494988352060318, 0.718269944190979, 0.4949878752231598, 0.4056314527988434, 0.4056314527988434, 0.4056314527988434, 0.958774745464325, 0.958775520324707, 0.9587745666503906, 0.907745897769928, 0.5116575360298157, 0.2947331964969635, 0.09824439883232117, 0.589466392993927, 0.3561237156391144, 0.5341855883598328, 0.5903236865997314, 0.2951618432998657, 0.6756694912910461, 0.49496468901634216, 0.9587754011154175, 0.8950091600418091, 0.9077457189559937, 0.4949880540370941, 0.49496784806251526, 0.4949882924556732, 0.1731678992509842, 0.1731678992509842, 0.6926715970039368, 0.8612027168273926, 0.5114811658859253, 0.7567006349563599, 0.6767446398735046, 0.7994885444641113, 0.14990410208702087, 0.04996803402900696, 0.7203260660171509, 0.36016303300857544, 0.4949882924556732, 0.6755340695381165, 0.95877605676651, 0.49498847126960754, 0.6383664608001709, 0.15959161520004272, 0.15959161520004272, 0.48589062690734863, 0.48589062690734863, 0.9312563538551331, 0.7447941899299622, 0.27617672085762024, 0.09205890446901321, 0.5523534417152405, 0.7202715277671814, 0.3601357638835907, 0.4860222637653351, 0.24301113188266754, 0.9683259725570679, 0.4949800968170166, 0.9555739164352417, 0.6680479645729065, 0.06680479645729065, 0.20041438937187195, 0.8611962199211121, 0.4949885308742523, 0.6786223649978638, 0.7567006349563599, 0.10014472901821136, 0.3004341721534729, 0.10014472901821136, 0.6008683443069458, 0.4844829738140106, 0.4844829738140106, 0.22640317678451538, 0.6792095303535461, 0.5116577744483948, 0.9555256962776184, 0.6755366921424866, 0.9300990104675293, 0.4949880540370941, 0.17046187818050385, 0.8523093461990356, 0.4949890971183777, 0.31770187616348267, 0.31770187616348267, 0.31770187616348267, 0.42792749404907227, 0.5705699920654297, 0.38166481256484985, 0.38166481256484985, 0.4754074513912201, 0.23770372569561005, 0.23770372569561005, 0.644784152507782, 0.1611960381269455, 0.1611960381269455], &amp;ldquo;Term&amp;rdquo;: [&amp;quot;-citizens&amp;rdquo;, &amp;ldquo;-found&amp;rdquo;, &amp;ldquo;-secretary&amp;rdquo;, &amp;ldquo;1,000&amp;rdquo;, &amp;ldquo;13,979&amp;rdquo;, &amp;ldquo;15,000&amp;rdquo;, &amp;ldquo;26-year&amp;rdquo;, &amp;ldquo;3,000&amp;rdquo;, &amp;ldquo;60000&amp;rdquo;, &amp;ldquo;action&amp;rdquo;, &amp;ldquo;action&amp;rdquo;, &amp;ldquo;action&amp;rdquo;, &amp;ldquo;action&amp;rdquo;, &amp;ldquo;advisor&amp;rdquo;, &amp;ldquo;afraid&amp;rdquo;, &amp;ldquo;already&amp;rdquo;, &amp;ldquo;already&amp;rdquo;, &amp;ldquo;always&amp;rdquo;, &amp;ldquo;always&amp;rdquo;, &amp;ldquo;always&amp;rdquo;, &amp;ldquo;announce&amp;rdquo;, &amp;ldquo;anyone&amp;rdquo;, &amp;ldquo;approve&amp;rdquo;, &amp;ldquo;arrest&amp;rdquo;, &amp;ldquo;arrest&amp;rdquo;, &amp;ldquo;arrest&amp;rdquo;, &amp;ldquo;arrive&amp;rdquo;, &amp;ldquo;arrive&amp;rdquo;, &amp;ldquo;article&amp;rdquo;, &amp;ldquo;article&amp;rdquo;, &amp;ldquo;attack&amp;rdquo;, &amp;ldquo;attack&amp;rdquo;, &amp;ldquo;average&amp;rdquo;, &amp;ldquo;baianos&amp;rdquo;, &amp;ldquo;become&amp;rdquo;, &amp;ldquo;billion&amp;rdquo;, &amp;ldquo;billion&amp;rdquo;, &amp;ldquo;birthday&amp;rdquo;, &amp;ldquo;bolsonaro&amp;rdquo;, &amp;ldquo;bolsonaro&amp;rdquo;, &amp;ldquo;bolsonaro&amp;rdquo;, &amp;ldquo;brasilia&amp;rdquo;, &amp;ldquo;brasilia&amp;rdquo;, &amp;ldquo;brasilia&amp;rdquo;, &amp;ldquo;brazil&amp;rdquo;, &amp;ldquo;brazil&amp;rdquo;, &amp;ldquo;brazil&amp;rdquo;, &amp;ldquo;campaign&amp;rdquo;, &amp;ldquo;camuflagem&amp;rdquo;, &amp;ldquo;capital&amp;rdquo;, &amp;ldquo;case&amp;rdquo;, &amp;ldquo;case&amp;rdquo;, &amp;ldquo;check&amp;rdquo;, &amp;ldquo;child&amp;rdquo;, &amp;ldquo;collapse&amp;rdquo;, &amp;ldquo;combat&amp;rdquo;, &amp;ldquo;combat&amp;rdquo;, &amp;ldquo;coming&amp;rdquo;, &amp;ldquo;comparison&amp;rdquo;, &amp;ldquo;confrontation&amp;rdquo;, &amp;ldquo;congress&amp;rdquo;, &amp;ldquo;congress&amp;rdquo;, &amp;ldquo;consider&amp;rdquo;, &amp;ldquo;contract&amp;rdquo;, &amp;ldquo;control&amp;rdquo;, &amp;ldquo;corona&amp;rdquo;, &amp;ldquo;corona&amp;rdquo;, &amp;ldquo;corona&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;coronavirus&amp;rdquo;, &amp;ldquo;country&amp;rdquo;, &amp;ldquo;country&amp;rdquo;, &amp;ldquo;courage&amp;rdquo;, &amp;ldquo;covid&amp;rdquo;, &amp;ldquo;covid&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;covid-19&amp;rdquo;, &amp;ldquo;covidan&amp;rdquo;, &amp;ldquo;criticize&amp;rdquo;, &amp;ldquo;dealer&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;death&amp;rdquo;, &amp;ldquo;decide&amp;rdquo;, &amp;ldquo;defend&amp;rdquo;, &amp;ldquo;defense&amp;rdquo;, &amp;ldquo;delivery&amp;rdquo;, &amp;ldquo;demand&amp;rdquo;, &amp;ldquo;demonstrate&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;demonstration&amp;rdquo;, &amp;ldquo;destoa&amp;rdquo;, &amp;ldquo;distance&amp;rdquo;, &amp;ldquo;distance&amp;rdquo;, &amp;ldquo;distance&amp;rdquo;, &amp;ldquo;doctor&amp;rdquo;, &amp;ldquo;doctor&amp;rdquo;, &amp;ldquo;doria&amp;rdquo;, &amp;ldquo;doria&amp;rdquo;, &amp;ldquo;elderly&amp;rdquo;, &amp;ldquo;emergency&amp;rdquo;, &amp;ldquo;emergency&amp;rdquo;, &amp;ldquo;emergency&amp;rdquo;, &amp;ldquo;energy&amp;rdquo;, &amp;ldquo;epidemic&amp;rdquo;, &amp;ldquo;epidemic&amp;rdquo;, &amp;ldquo;everything&amp;rdquo;, &amp;ldquo;expenditure&amp;rdquo;, &amp;ldquo;federal&amp;rdquo;, &amp;ldquo;federal&amp;rdquo;, &amp;ldquo;federal&amp;rdquo;, &amp;ldquo;fight&amp;rdquo;, &amp;ldquo;fight&amp;rdquo;, &amp;ldquo;fight&amp;rdquo;, &amp;ldquo;flag&amp;rdquo;, &amp;ldquo;flexibility&amp;rdquo;, &amp;ldquo;globo&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;government&amp;rdquo;, &amp;ldquo;governor&amp;rdquo;, &amp;ldquo;governor&amp;rdquo;, &amp;ldquo;governor&amp;rdquo;, &amp;ldquo;governor&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;health&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;hospital&amp;rdquo;, &amp;ldquo;hydroxychloroquine&amp;rdquo;, &amp;ldquo;hydroxychloroquine&amp;rdquo;, &amp;ldquo;infect&amp;rdquo;, &amp;ldquo;infect&amp;rdquo;, &amp;ldquo;infect&amp;rdquo;, &amp;ldquo;infect&amp;rdquo;, &amp;ldquo;inflate&amp;rdquo;, &amp;ldquo;lastly&amp;rdquo;, &amp;ldquo;little&amp;rdquo;, &amp;ldquo;malaysia&amp;rdquo;, &amp;ldquo;march&amp;rdquo;, &amp;ldquo;measure&amp;rdquo;, &amp;ldquo;measure&amp;rdquo;, &amp;ldquo;measure&amp;rdquo;, &amp;ldquo;medical&amp;rdquo;, &amp;ldquo;medical&amp;rdquo;, &amp;ldquo;medium&amp;rdquo;, &amp;ldquo;medium&amp;rdquo;, &amp;ldquo;minister&amp;rdquo;, &amp;ldquo;minister&amp;rdquo;, &amp;ldquo;minister&amp;rdquo;, &amp;ldquo;money&amp;rdquo;, &amp;ldquo;natural&amp;rdquo;, &amp;ldquo;negative&amp;rdquo;, &amp;ldquo;nelson&amp;rdquo;, &amp;ldquo;network&amp;rdquo;, &amp;ldquo;never&amp;rdquo;, &amp;ldquo;never&amp;rdquo;, &amp;ldquo;never&amp;rdquo;, &amp;ldquo;never&amp;rdquo;, &amp;ldquo;number&amp;rdquo;, &amp;ldquo;number&amp;rdquo;, &amp;ldquo;office&amp;rdquo;, &amp;ldquo;office&amp;rdquo;, &amp;ldquo;overcrowd&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;pandemic&amp;rdquo;, &amp;ldquo;paulo&amp;rdquo;, &amp;ldquo;paulo&amp;rdquo;, &amp;ldquo;people&amp;rdquo;, &amp;ldquo;people&amp;rdquo;, &amp;ldquo;people&amp;rdquo;, &amp;ldquo;phares&amp;rdquo;, &amp;ldquo;phone&amp;rdquo;, &amp;ldquo;pistol&amp;rdquo;, &amp;ldquo;place&amp;rdquo;, &amp;ldquo;place&amp;rdquo;, &amp;ldquo;place&amp;rdquo;, &amp;ldquo;positive&amp;rdquo;, &amp;ldquo;positive&amp;rdquo;, &amp;ldquo;preach&amp;rdquo;, &amp;ldquo;presence&amp;rdquo;, &amp;ldquo;presence&amp;rdquo;, &amp;ldquo;president&amp;rdquo;, &amp;ldquo;president&amp;rdquo;, &amp;ldquo;press&amp;rdquo;, &amp;ldquo;press&amp;rdquo;, &amp;ldquo;press&amp;rdquo;, &amp;ldquo;prevent&amp;rdquo;, &amp;ldquo;prevention&amp;rdquo;, &amp;ldquo;price&amp;rdquo;, &amp;ldquo;profile&amp;rdquo;, &amp;ldquo;protect&amp;rdquo;, &amp;ldquo;protection&amp;rdquo;, &amp;ldquo;provide&amp;rdquo;, &amp;ldquo;prudent&amp;rdquo;, &amp;ldquo;quarantine&amp;rdquo;, &amp;ldquo;quarantine&amp;rdquo;, &amp;ldquo;quarantine&amp;rdquo;, &amp;ldquo;question&amp;rdquo;, &amp;ldquo;recently&amp;rdquo;, &amp;ldquo;recife&amp;rdquo;, &amp;ldquo;record&amp;rdquo;, &amp;ldquo;relative&amp;rdquo;, &amp;ldquo;release&amp;rdquo;, &amp;ldquo;release&amp;rdquo;, &amp;ldquo;release&amp;rdquo;, &amp;ldquo;report&amp;rdquo;, &amp;ldquo;report&amp;rdquo;, &amp;ldquo;respirator&amp;rdquo;, &amp;ldquo;respirator&amp;rdquo;, &amp;ldquo;result&amp;rdquo;, &amp;ldquo;revenue&amp;rdquo;, &amp;ldquo;sauer&amp;rdquo;, &amp;ldquo;science&amp;rdquo;, &amp;ldquo;secret&amp;rdquo;, &amp;ldquo;security&amp;rdquo;, &amp;ldquo;seize&amp;rdquo;, &amp;ldquo;serious&amp;rdquo;, &amp;ldquo;share&amp;rdquo;, &amp;ldquo;share&amp;rdquo;, &amp;ldquo;share&amp;rdquo;, &amp;ldquo;shooting&amp;rdquo;, &amp;ldquo;since&amp;rdquo;, &amp;ldquo;singer&amp;rdquo;, &amp;ldquo;situation&amp;rdquo;, &amp;ldquo;social&amp;rdquo;, &amp;ldquo;social&amp;rdquo;, &amp;ldquo;social&amp;rdquo;, &amp;ldquo;speech&amp;rdquo;, &amp;ldquo;speech&amp;rdquo;, &amp;ldquo;spend&amp;rdquo;, &amp;ldquo;spoke&amp;rdquo;, &amp;ldquo;stadium&amp;rdquo;, &amp;ldquo;start&amp;rdquo;, &amp;ldquo;state&amp;rdquo;, &amp;ldquo;state&amp;rdquo;, &amp;ldquo;state&amp;rdquo;, &amp;ldquo;still&amp;rdquo;, &amp;ldquo;still&amp;rdquo;, &amp;ldquo;street&amp;rdquo;, &amp;ldquo;study&amp;rdquo;, &amp;ldquo;support&amp;rdquo;, &amp;ldquo;support&amp;rdquo;, &amp;ldquo;support&amp;rdquo;, &amp;ldquo;suspicion&amp;rdquo;, &amp;ldquo;suspicion&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, &amp;ldquo;system&amp;rdquo;, &amp;ldquo;take&amp;rdquo;, &amp;ldquo;technology&amp;rdquo;, &amp;ldquo;teich&amp;rdquo;, &amp;ldquo;test&amp;rdquo;, &amp;ldquo;test&amp;rdquo;, &amp;ldquo;test&amp;rdquo;, &amp;ldquo;thing&amp;rdquo;, &amp;ldquo;think&amp;rdquo;, &amp;ldquo;thousand&amp;rdquo;, &amp;ldquo;timel&amp;rdquo;, &amp;ldquo;today&amp;rdquo;, &amp;ldquo;today&amp;rdquo;, &amp;ldquo;today&amp;rdquo;, &amp;ldquo;today&amp;rdquo;, &amp;ldquo;treatment&amp;rdquo;, &amp;ldquo;treatment&amp;rdquo;, &amp;ldquo;trump&amp;rdquo;, &amp;ldquo;trump&amp;rdquo;, &amp;ldquo;try&amp;rdquo;, &amp;ldquo;video&amp;rdquo;, &amp;ldquo;videoconference&amp;rdquo;, &amp;ldquo;vocid-19&amp;rdquo;, &amp;ldquo;want&amp;rdquo;, &amp;ldquo;watch&amp;rdquo;, &amp;ldquo;watch&amp;rdquo;, &amp;ldquo;website&amp;rdquo;, &amp;ldquo;without&amp;rdquo;, &amp;ldquo;without&amp;rdquo;, &amp;ldquo;without&amp;rdquo;, &amp;ldquo;witzel&amp;rdquo;, &amp;ldquo;witzel&amp;rdquo;, &amp;ldquo;works&amp;rdquo;, &amp;ldquo;works&amp;rdquo;, &amp;ldquo;world&amp;rdquo;, &amp;ldquo;world&amp;rdquo;, &amp;ldquo;world&amp;rdquo;, &amp;ldquo;would&amp;rdquo;, &amp;ldquo;would&amp;rdquo;, &amp;ldquo;would&amp;rdquo;]}, &amp;ldquo;R&amp;rdquo;: 30, &amp;ldquo;lambda.step&amp;rdquo;: 0.01, &amp;ldquo;plot.opts&amp;rdquo;: {&amp;ldquo;xlab&amp;rdquo;: &amp;ldquo;PC1&amp;rdquo;, &amp;ldquo;ylab&amp;rdquo;: &amp;ldquo;PC2&amp;rdquo;}, &amp;ldquo;topic.order&amp;rdquo;: [1, 2, 3, 4]};&lt;/p&gt;
&lt;p&gt;function LDAvis_load_lib(url, callback){
var s = document.createElement(&amp;lsquo;script&amp;rsquo;);
s.src = url;
s.async = true;
s.onreadystatechange = s.onload = callback;
s.onerror = function(){console.warn(&amp;ldquo;failed to load library &amp;quot; + url);};
document.getElementsByTagName(&amp;ldquo;head&amp;rdquo;)[0].appendChild(s);
}&lt;/p&gt;
&lt;p&gt;if(typeof(LDAvis) !== &amp;ldquo;undefined&amp;rdquo;){
// already loaded: just create the visualization
!function(LDAvis){
new LDAvis(&amp;quot;#&amp;rdquo; + &amp;ldquo;ldavis_el786423234483639764619859254&amp;rdquo;, ldavis_el786423234483639764619859254_data);
}(LDAvis);
}else if(typeof define === &amp;ldquo;function&amp;rdquo; &amp;amp;&amp;amp; define.amd){
// require.js is available: use it to load d3/LDAvis
require.config({paths: {d3: &amp;ldquo;&lt;a href=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min%22%7D%7D);&#34;&gt;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min&amp;quot;}});&lt;/a&gt;
require([&amp;ldquo;d3&amp;rdquo;], function(d3){
window.d3 = d3;
LDAvis_load_lib(&amp;ldquo;&lt;a href=&#34;https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js%22,&#34;&gt;https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js&amp;quot;,&lt;/a&gt; function(){
new LDAvis(&amp;quot;#&amp;rdquo; + &amp;ldquo;ldavis_el786423234483639764619859254&amp;rdquo;, ldavis_el786423234483639764619859254_data);
});
});
}else{
// require.js not available: dynamically load d3 &amp;amp; LDAvis
LDAvis_load_lib(&amp;ldquo;&lt;a href=&#34;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js%22,&#34;&gt;https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js&amp;quot;,&lt;/a&gt; function(){
LDAvis_load_lib(&amp;ldquo;&lt;a href=&#34;https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js%22,&#34;&gt;https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js&amp;quot;,&lt;/a&gt; function(){
new LDAvis(&amp;quot;#&amp;rdquo; + &amp;ldquo;ldavis_el786423234483639764619859254&amp;rdquo;, ldavis_el786423234483639764619859254_data);
})
});
}
&lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&#34;sentiment-analysis-1&#34;&gt;Sentiment analysis&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
analyser = SentimentIntensityAnalyzer()

def sentiment_analyzer_scores(sentence):
    score = analyser.polarity_scores(sentence)
    score = score[&#39;compound&#39;]
    return score
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;covid_subsample[&amp;quot;Sentiment&amp;quot;] = covid_subsample[&amp;quot;Tweets_en&amp;quot;].apply(sentiment_analyzer_scores)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;C:\ProgramData\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;idx = pd.date_range(&#39;01-30-2020&#39;, &#39;05-07-2020&#39;)
covid_subsample.index = pd.DatetimeIndex(covid_subsample.Date)

covid_subsample = covid_subsample.reindex(idx, fill_value=0)

sent = pd.Series(data=covid_subsample[&#39;Sentiment&#39;].values, index=covid_subsample[&#39;Date&#39;])
sent.plot(figsize=(16,4), label=&amp;quot;Compound sentiment&amp;quot;, legend=True,drawstyle=&amp;quot;steps&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1ed00363408&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_36_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Optimal Stochastic Control</title>
      <link>/code_project/optimal_stochastic_control/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>/code_project/optimal_stochastic_control/</guid>
      <description>


&lt;div id=&#34;stochastic-solution&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Stochastic solution&lt;/h1&gt;
&lt;p&gt;This markdown is based on work for the paper “The Birth of a Multinational: Innovation and Foreign Acquisitions” with Jim Goldman, Maria Guadalupe and Veronica Rapppoport. The problem is to find the optimal timing and amount of investment into a new technology, as well as when to become a multinational, i.e. enter a new market facing higher demand. Expertise which forms together with technology the level of productivity is stochastic in this setting following a Brownian motion. This problem is a combination of a optimal stochastic impulse control problem (when and how much to invest) and an optimal switching problem (when to enter the new market). For those problems a closed-form solution usually doesn’t exist. Hence, I thought it might be of general interest to show how to tackle such a problem numerically.&lt;/p&gt;
&lt;div id=&#34;method&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Method&lt;/h2&gt;
&lt;p&gt;The numerical solution method follows the outline of the “Forward simulation and backward updating” (FSBU) algorithm described in “A Backward Simulation Method for Stochastic Optimal Control Problems” by Shen &amp;amp; Weng (2019).&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Initiation:&lt;/p&gt;
&lt;p&gt;Set &lt;span class=&#34;math inline&#34;&gt;\(V_{d,T}(a,h) = \pi_{M,T}(a,h)\)&lt;/span&gt;. Meaning that after some finite time T every domestic firm is eventually a multinational firm. So we have to back out, how the firm got there optimally. Given that the value is time-dependent, so will the policy functions (likely to converge to some constant decision rule after some time). For &lt;span class=&#34;math inline&#34;&gt;\(t= T-1, T-2,...\)&lt;/span&gt; do the following two steps:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forward Simulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Control randomization: Generate random samples (N: amount of Monte Carlo simulations) of actions (invest &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; (arbitrary), open foreign affiliation &lt;span class=&#34;math inline&#34;&gt;\(f\)&lt;/span&gt; (once for &lt;span class=&#34;math inline&#34;&gt;\(t \in[1,T]\)&lt;/span&gt;)) up to time t:
&lt;span class=&#34;math display&#34;&gt;\[a^n_{1:t} = (a_1^n,...,a_t^n), n=1,2,...,N, \]&lt;/span&gt;
&lt;span class=&#34;math display&#34;&gt;\[ f^n_{1:t} = (f_1^n,...,f_t^n), n=1,2,...,N, \]&lt;/span&gt;
with &lt;span class=&#34;math inline&#34;&gt;\(\sum_{i=1}^{t}f_i^n=1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(f_i \in (0,1)\)&lt;/span&gt; for all &lt;span class=&#34;math inline&#34;&gt;\(n = 1,2,...,N\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simulation of state process: Simulate random innovations to the process of experience:
&lt;span class=&#34;math display&#34;&gt;\[\epsilon^n_{1:t} = (\epsilon_1^n,...,\epsilon_t^n), n=1,2,...,N,\]&lt;/span&gt;
This gives us a sample of the state process
&lt;span class=&#34;math display&#34;&gt;\[X^n_{1:t} = (X_1^n,...,X_t^n), n=1,2,...,N,\]&lt;/span&gt;
where each state &lt;span class=&#34;math inline&#34;&gt;\(X^n_{t}\)&lt;/span&gt; is a function of its prior state, any action/inaction and innovations to experience: &lt;span class=&#34;math inline&#34;&gt;\(X^n_{t}= s(X^n_{t-1},a^n_{t-1},f^n_{t-1},\epsilon_t^n)\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backward Updating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-parametric regression: Now using the simulated states construct value as dependent variable by just assigning the reward (profit) function to the state:
&lt;span class=&#34;math display&#34;&gt;\[Y^n_{t+1} = V_{t+1}(X_{t+1}^n), n=1,2,...,N.\]&lt;/span&gt;
Further, as independent variable, construct sample of post-action state value (function K captures loss in experience, increase in a)
&lt;span class=&#34;math display&#34;&gt;\[ X^n_{t+} = K(X_{t}^n,a_t^n,f_t^n), n=1,2,...,N.\]&lt;/span&gt;
Now regressing &lt;span class=&#34;math inline&#34;&gt;\(Y^n_{t+1}\)&lt;/span&gt; on &lt;span class=&#34;math inline&#34;&gt;\(X^n_{t+}\)&lt;/span&gt; non-parametrically gives us an estimate of the continuation value &lt;span class=&#34;math inline&#34;&gt;\(C_t\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Optimization: Finally, in order to find the optimal policy functions (i.e. when and how much to invest and when to enter) we optimize the following problem recursively for all t (hence, time dependent policies).
&lt;span class=&#34;math display&#34;&gt;\[V_t(a,h) = \sup_{a&amp;#39;,f}[\pi_t(X_t,a&amp;#39;,f)+\beta C_t(K(X_{t},a&amp;#39;,f))]\]&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;set-parameters-of-model&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set parameters of model&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;M_d = 1      # domestic revenue stream
M_m = 1.25   # revenue stream multinational
p_a = 0.2    # cost for innovating
F_M = 2      # cost for opening foreign affiliation
r = 0.02     # two percent risk free rate per period
kappa = 0.1  # drop in experience due to new technology
mu = 0.015   # learning rate
sigma = 0.1  # standard deviation of brownian motion

a0 = 0       # initial technology level
h0 = 0.5     # initial experience level&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;set-parameters-for-simulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Set parameters for simulation&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;N = 1000 # number of Monte Carlo simulations 
T = 10 # points in time
B = 0 # burn in periods&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;initialize-objects-to-save-simulations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initialize objects to save simulations&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# actions
investment = matrix(0,N,T+B)
entry = matrix(0,N,T+B)

# value of firm
value = matrix(0,N,T+B)
# states
state_space = array(0,dim=c(3,N,T+B))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;forward-simulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Forward Simulation&lt;/h2&gt;
&lt;p&gt;The following block implements the forward Monte carlo Simulation for N firms. First, we draw random investment and entry strategies for each firm at each point in time. While a firm can invest at any point in time, any amount, it can only once open a foreign affiliation and become a multinational.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Control randomization
for (i in 1:N){
  set.seed(i*123)
  # here investment replaces old technology level if higher
  investment[i,] = pmax(0,rnorm(T+B, mean = 0, sd = 2))
  set.seed(i*1234)
  entry[i,sample(1:(T+B),1)] = 1 # maybe use heuristik, so less Monte Carlo simulations are needed, e.g. entry if ((T-t)*productivity*(M_m-M_d)&amp;gt;F_M)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, based on our control randomization, we calculate the resulting states starting with out initial values for the technology level and expertise. The states evolve according to the actions each firm takes and the stochastic learning process for expertise. The state_space is an object which saves the value of each state (technology level, expertise and domestic/multinational dummy) for each firm at each point in time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Calculate state process based on actions and shocks. 
#States: a, h, shock (forming productivity), foreign_dummy
set.seed(2)
state_space[1,,1] = pmax(0,rnorm(N, mean = 0.5, sd = 1)) # initial technology level for all simulations 
set.seed(3)
state_space[2,,1] = pmax(0,rnorm(N, mean = 0.5, sd = 1)) # initial experience level for all simulations
#Note! if we want to start from an initial distribution 
#we might need to &amp;quot;burn&amp;quot; some simulations at the start
state_space[3,,1] = 0  # initially domestic firm

# initialize object to save simulations of sde
sde = array(0,dim=c(N))
drift = expression(mu * x)
diffusion = expression(sqrt(2) * sigma * x)

for (t in 2:(T+B)){
  state_space[1,,t] = state_space[1,,t-1] + investment[,t-1]
  # for experience we need to account for stochastic drift
  for (n in 1:N){
  #set.seed(n*12345)
    if (investment[n,t-1]&amp;gt;0){
      x0 = state_space[2,n,t-1] * (1-kappa)
    }
    else {
      x0 = state_space[2,n,t-1]
    }
  aux = snssde1d(N=2,drift = drift, diffusion = diffusion, x0 = x0,M=1, type=&amp;quot;ito&amp;quot;,Dt=1)
  sde[n] = aux$X[2]
  # use heuristik to determine entry
  #if((T-t)*(state_space[2,n,t-1]*state_space[1,n,t-1])^0.5*(M_m-M_d)&amp;gt;(F_M/2) &amp;amp; state_space[3,n,t-1]==0){
  #  entry[n,t-1] = 1
  #}
  #else{
  #  entry[n,t-1] = 0
  #}
  }
  
  state_space[2,,t] = sde
  state_space[3,,t] = state_space[3,,t-1] + entry[,t-1] 
}

# Delete burn in periods
if (B&amp;gt;0){
state_space_b = state_space[,,(B+1):(T+B)]
state_space_b[1,,] = state_space_b[1,,]/quantile(state_space_b[1,,1],0.99)
state_space_b[2,,] = state_space_b[2,,]/quantile(state_space_b[2,,1],0.99)
state_space = NULL
state_space = state_space_b
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have simulated the state space, we can calculate the reward (here the revenue) for each firm and get the (idiosyncratic) value function for each point in time recursively. This is what we want to maximize later, taking the cost of each action into account.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# reward function = revenue (cost trade-off in optimization)
revenue_function = function(state_space){
  a = state_space[1,,]
  h = state_space[2,,]
  f = state_space[3,,]
  revenue = (1-f) * a^0.5 * h^0.5 * M_d + f * a^0.5 * h^0.5 * M_m #- as.numeric(investment&amp;gt;0)*(investment+a)*p_a - entry*F_M
  return(revenue)
}
revenue = revenue_function (state_space)

# calculate net present value of revenue over time
revenue_value_function = function(revenue){
  value_t = array(0,dim=dim(revenue))
  value_t[,ncol(revenue)] = revenue[,ncol(revenue)]
  for (t in (ncol(revenue)-1):1){
  value_t[,t] = revenue[,t] + exp(-r)*value_t[,t+1]
  }
  return(value_t)
}

value_revenue = revenue_value_function(revenue)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we plot some simulated paths of the state space and the corresponding revenue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plot some simulated paths
n=1000
par(mfrow=c(2,2),mar=c(4,4,1,1))
exp_p = ts(t(state_space[2,1:n,]))
ts.plot(exp_p,ylab = &amp;quot;Experience&amp;quot;,gpars= list(col=plasma(n)))

inv_p = ts(t(state_space[1,1:n,]))
ts.plot(inv_p,ylab = &amp;quot;Investment&amp;quot;,gpars= list(col=plasma(n)))

entry_p = ts(t(state_space[3,1:n,]))
ts.plot(entry_p,ylab = &amp;quot;Foreign affiliation&amp;quot;,gpars= list(col=plasma(n)))

revenue_p = ts(t(revenue[1:n,]))
ts.plot(revenue_p,ylab = &amp;quot;Revenue&amp;quot;,gpars= list(col=plasma(n)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Optimal_stochastic_control/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;backward-updating-and-optimization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Backward Updating and Optimization&lt;/h2&gt;
&lt;p&gt;Up to this point we have simulated many potential paths for firms’ values depending on randomized actions. From that simulated data we aim to back out the optimal actions at any given state for each point in time. This will be done by backward updating which gives us an estimate of the continuation value and optimization, which chooses those actions maximizing the continuation value. This procedure is done in two steps: In a first step we non-parametrically regress (here using Gradient Boosting as this is extremely fast) the simulated (path-specific!) values on the simulated post-action states to get a mapping from post-action state to continuation value. The mapping from state to post-action state is deterministic and depends on the respective actions. Using those two mappings, one deterministic and the other one estimated, we can run an optimization scheme choosing those actions, which lead us to the corresponding post-action state which in turn gives us the highest continuation value in expecttation in the next period. We do this for any given “pre-action” state. The whole procedure is done backwards, for each point in time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get post action state values - states as vectors for non-parametric estimation
post_action_vector = function(current_state,investment,entry){
  post_action = array(0,dim=c(3,N))
  a = current_state[1,]
  h = current_state[2,]
  f = current_state[3,]
  post_action[1,] = a + investment 
  post_action[2,] = h * (1-as.numeric(investment&amp;gt;0)) + h * (1-kappa) * as.numeric(investment&amp;gt;0)
  post_action[3,] = f + entry
  return(post_action)
}

# get post action state values - states as scalars for optimization
post_action = function(a,h,f,investment,entry){
  post_action = array(0,dim=c(3))
  post_action[1] = a + investment 
  post_action[2] = h * (1-as.numeric(investment&amp;gt;0)) + h * (1-kappa) * as.numeric(investment&amp;gt;0)
  post_action[3] = f + entry
  return(post_action) 
}


# value_function (continuous optim)
value_function_cont = function(a,h,f,o,x, model = model.np){
  post = post_action(a,h,f,x,o)
  sim_data = NULL
  sim_data$inv = post[1]
  sim_data$exp = post[2]
  sim_data$foreign = post[3]
  value = (1-f) * a^0.5 * h^0.5 * M_d + f * a^0.5 * h^0.5 * M_m - as.numeric(x[1]&amp;gt;0)*(a+x[1])*p_a - (o&amp;gt;0)*F_M + exp(-r)*predict(model,as_tibble(sim_data))$predictions
  return(-value)
}


# initialize object to save optimal choices per time, per tech level, per experience and per action (invest, open fa)
optim_choices_df = NULL
# initialize value function (last period simply equal to revenue, as any action would violate optimality)
value_function_opt = value_revenue

for (t in T:2){
  print(paste(&amp;quot;Now optimizing time: &amp;quot;,t,sep=&amp;quot;&amp;quot;))

# Calculate numerical estimate of value function for all states at time t
if (t &amp;lt; T){
# ! map random state (post-action and shock) to value, then regress on post_action
states_data = NULL
states_data$inv = state_space[1,,t]
states_data$exp = state_space[2,,t]
states_data$foreign = state_space[3,,t]
states_data = as_tibble(states_data) 
value_function_opt[,t] = predict(value_function_optim,newdata = states_data,se.fit=FALSE)
#value_function_opt[,t] = predict(value_function_optim_gbm,as_tibble(states_data),n.trees=min_MSE_value)
}

# Non-parametric estimation of continuation value using numerical estimate of value function of the next period.
K = post_action_vector(state_space[,,t-1],investment[,t-1],entry[,t-1])
# collect variables into data frame
sim_data = NULL
sim_data$inv = K[1,]
sim_data$exp = K[2,]
sim_data$foreign = K[3,]
sim_data$rev = value_function_opt[,t] # ! calculate numerical estimate of value function backwards
sim_data = as_tibble(sim_data)
sim_data = sim_data %&amp;gt;% filter(inv &amp;lt;= quantile(inv,0.99), exp &amp;lt;= quantile(exp,0.99))

# Gradient Boosting
set.seed(1)
#gbm &amp;lt;- gbm(rev ~.,data = sim_data, dist = &amp;quot;gaussian&amp;quot;,interact=3,n.trees=1000,cv.folds=5,bag.fraction=1)
#plotres(gbm)
#min_MSE &amp;lt;- which.min(gbm$cv.error)
#plotmo::plotmo(gbm, pmethod=&amp;quot;partdep&amp;quot;)
rf &amp;lt;-  ranger(rev ~ ., data = sim_data)
#pdp::partial(rf,pred.var=&amp;quot;inv&amp;quot;,plot=TRUE)
#pdp::partial(rf,pred.var=&amp;quot;entry&amp;quot;,plot=TRUE)

for (a in seq(min(state_space[1,,t-1]),quantile(state_space[1,,t-1],0.99), length.out = 5)){
  for(h in seq(min(state_space[2,,t-1]),quantile(state_space[2,,t-1],0.99), length.out = 5)){
    for(f in c(0,1)){
    
    # save optimal choices of investment and opening foreign affiliation
    optim_choice = array(NA,dim=c(1,2))
    
    # continuous optimization - fix: discrete case of opening foreign affiliation
      optimum = optim(par = c(0), fn = value_function_cont, lower=c(0), upper=c(100), method = &amp;quot;Brent&amp;quot;, a=a, h=h, f=f, o=0, model = rf)
      optim_choice = c(optimum$par,0)
      optim_value = -optimum$value
      # specifically check investment = 0, doesn&amp;#39;t seem to find corner solution
      if (- value_function_cont(a,h,f,0,0,model=rf) &amp;gt; optim_value){
        optim_choice = c(0,0)
        optim_value = -value_function_cont(a,h,f,0,0,model=rf)
      }
      #optimum = optim(par = c(0), fn = value_function_cont, lower=c(0), upper=c(100), method = &amp;quot;Brent&amp;quot;, a=a, h=h, f=f, o=1, model = rf)
      #if (-optimum$value &amp;gt; optim_value){
      #  optim_choice = c(optimum$par,1)
      #  optim_value = -optimum$value
      #}
      # specifically check investment = 0, doesn&amp;#39;t seem to find corner solution
      if (-value_function_cont(a,h,f,1,0,model=rf) &amp;gt; optim_value){
        optim_choice = c(0,1)
        optim_value = -value_function_cont(a,h,f,1,0,model=rf)
      }
      
    aux = NULL
    aux$time = t-1 # save period
    aux$inv = a    # state of technology level
    aux$exp = h    # state of experience
    aux$foreign = f # state of domestic/multinational
    aux$invest = optim_choice[1] # optimal investment
    aux$open = optim_choice[2]   # optimal entry
    aux$value = optim_value      # optimal value
    optim_choices_df = rbind(optim_choices_df,aux)
    }
  }
}
optim_choices_df = as_tibble(optim_choices_df)
optim_choices_df = unnest(optim_choices_df,cols = c(time, inv, exp, foreign, invest, open, value) )

if (t&amp;gt;2){
# map optimal value to states
test_data = optim_choices_df %&amp;gt;% filter(time == t-1)
npseed(42)
value_function_optim &amp;lt;- npreg(value ~ inv + exp + foreign,data = test_data)
#value_function_optim_gbm &amp;lt;- gbm(value ~ inv + exp + foreign,data = test_data,dist = &amp;quot;gaussian&amp;quot;,interact=3,n.trees=1000,cv.folds=5)
#min_MSE_value &amp;lt;- which.min(value_function_optim_gbm$cv.error)
#plot(value_function_optim)
#plotmo::plotmo(value_function_optim_gbm, pmethod=&amp;quot;partdep&amp;quot;)
}
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Now optimizing time: 10&amp;quot;
## [1] &amp;quot;Now optimizing time: 9&amp;quot;
## [1] &amp;quot;Now optimizing time: 8&amp;quot;
## [1] &amp;quot;Now optimizing time: 7&amp;quot;
## [1] &amp;quot;Now optimizing time: 6&amp;quot;
## [1] &amp;quot;Now optimizing time: 5&amp;quot;
## [1] &amp;quot;Now optimizing time: 4&amp;quot;
## [1] &amp;quot;Now optimizing time: 3&amp;quot;
## [1] &amp;quot;Now optimizing time: 2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-results---per-point-in-time&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plot results - per point in time&lt;/h2&gt;
&lt;p&gt;Plots follow the paper “Deep neural networks algorithms for stochastic control
problems on finite horizon: numerical applications” by Bachouch et al. (2020).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;optim_choices_df %&amp;gt;% filter(foreign==0) %&amp;gt;% 
  ggplot() + 
  geom_raster(aes(x=inv,y=exp,fill=invest)) + 
  ylab(&amp;quot;Expertise&amp;quot;)+
  xlab(&amp;quot;Technology level&amp;quot;)+
  #scale_fill_manual(values=c(&amp;quot;snow2&amp;quot;,&amp;quot;yellow&amp;quot;), na.value=&amp;quot;black&amp;quot;, name=&amp;quot;Investment&amp;quot;) +
  scale_fill_gradient2(low=&amp;quot;snow2&amp;quot;, high=&amp;quot;yellow&amp;quot;, na.value=&amp;quot;black&amp;quot;, name=&amp;quot;Investment&amp;quot;) +
  geom_point(aes(x=inv,y=exp,size=ifelse(open, &amp;quot;enter&amp;quot;, &amp;quot;wait&amp;quot;),color=ifelse(open, &amp;quot;enter&amp;quot;, &amp;quot;wait&amp;quot;)),stroke = 0) +
  scale_size_manual(values=c(enter=1.5, wait=0), name=&amp;quot;Become multinational&amp;quot;) +
  scale_color_manual(values=c(enter=&amp;quot;forestgreen&amp;quot;, wait=&amp;quot;darkgray&amp;quot;),name=&amp;quot;Become multinational&amp;quot;)+
  facet_wrap(~time,scales=&amp;quot;free&amp;quot;,labeller = label_both)+
  scale_y_continuous(labels = scales::number_format(accuracy = 0.1))+
  scale_x_continuous(labels = scales::number_format(accuracy = 0.1))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Raster pixels are placed at uneven horizontal intervals and will be
## shifted. Consider using geom_tile() instead.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Raster pixels are placed at uneven vertical intervals and will be
## shifted. Consider using geom_tile() instead.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Optimal_stochastic_control/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;
The results suggest that firms invest more, the higher their experience level relative to their technology level. They refrain from investing as long as their technology level is high relative to their experience. Furthermore, a firm becomes a multinational as soon as its productivity is high enough, i.e. for high values of technology level and experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;optimal-vs.-random-strategy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Optimal vs. random strategy&lt;/h2&gt;
&lt;p&gt;Plot paths for firms with same stochastic shocks but one is behaving optimally, while the other one is behaving randomly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;optim_firm_df = NULL
random_firm_df = NULL
optim_choices_df = round(optim_choices_df,2)
# first firm is behaving randomly
set.seed(12)
random_firm_df$investment = pmax(0,runif(T, min = -2, max = 2))
random_firm_df$entry = 0
random_firm_df = as_tibble(random_firm_df)
random_firm_df$entry[sample(1:T,1)] = 1
random_firm_df$tech_level = 0
random_firm_df$foreign = 0
random_firm_df$exp = 0.5
random_firm_df$profit = 0
random_firm_df$time = 1
random_firm_df$shock = 0

# calculate profit for random firm
random_firm_df$profit[1] = (1-random_firm_df$foreign[1])*random_firm_df$tech_level[1]^0.5*random_firm_df$exp[1]^0.5 * M_d + (random_firm_df$foreign[1])*random_firm_df$tech_level[1]^0.5*random_firm_df$exp[1]^0.5 * M_m - (random_firm_df$tech_level[1]+random_firm_df$investment[1])*p_a*as.numeric(random_firm_df$investment[1]&amp;gt;0) - random_firm_df$entry[1] *F_M

for (t in 2:T){
  random_firm_df$time[t] = t
  random_firm_df$tech_level[t] = random_firm_df$tech_level[t-1] + random_firm_df$investment[t-1]
  set.seed(t*1234)
  if (random_firm_df$investment[t-1]&amp;gt;0){
      x0 = random_firm_df$exp[t-1] * (1-kappa)
    }
    else {
      x0 = random_firm_df$exp[t-1]
    }
  aux = snssde1d(N=2,drift = drift, diffusion = diffusion, x0 = x0,M=1, type=&amp;quot;ito&amp;quot;,Dt=1)
  random_firm_df$exp[t] = aux$X[2]
  random_firm_df$shock[t] = aux$X[2]/aux$X[1]
  random_firm_df$foreign[t] = random_firm_df$foreign[t-1] + random_firm_df$entry[t-1]
  random_firm_df$profit[t] = (1-random_firm_df$foreign[t])*random_firm_df$tech_level[t]^0.5*random_firm_df$exp[t]^0.5 * M_d +(random_firm_df$foreign[t])*random_firm_df$tech_level[t]^0.5*random_firm_df$exp[t]^0.5 * M_m - (random_firm_df$tech_level[t]+random_firm_df$investment[t])*p_a*as.numeric(random_firm_df$investment[t]&amp;gt;0) - random_firm_df$entry[t] *F_M
}



# second firm is behaving optimally (optimal choices those with smallest distance to state values)
dist &amp;lt;- function(a, h, f, t, optim_choices_df. = optim_choices_df){
          dt &amp;lt;- data.table(sqrt((optim_choices_df[[&amp;quot;inv&amp;quot;]]-a)^2 + (optim_choices_df[[&amp;quot;exp&amp;quot;]]-h)^2 + (optim_choices_df[[&amp;quot;foreign&amp;quot;]]-f)^2+(optim_choices_df[[&amp;quot;time&amp;quot;]]-t)^2))
          return(data.table(Closest.V1  = which.min(dt$V1)))
}


optim_firm_df$investment = array(0,dim=c(10,1))
optim_firm_df$entry = 0
optim_firm_df = as_tibble(optim_firm_df)
optim_firm_df$tech_level = 0
optim_firm_df$foreign = 0
optim_firm_df$exp = 0.5
optim_firm_df$profit = 0
optim_firm_df$time = 1
optim_firm_df$shock = 0

for (t in 1:(T-1)){
  optim_firm_df$time[t] = t
  # get optimal actions based on state
  optim &amp;lt;- dist(optim_firm_df$tech_level[t],optim_firm_df$exp[t],optim_firm_df$foreign[t],t)
  optim_firm_df$investment[t] &amp;lt;- optim_choices_df$invest[optim$Closest.V1]
  optim_firm_df$entry[t] &amp;lt;- optim_choices_df$open[optim$Closest.V1]
  
  optim_firm_df$tech_level[t+1] = optim_firm_df$tech_level[t] + optim_firm_df$investment[t]
  set.seed((t+1)*1234)
  if (optim_firm_df$investment[t]&amp;gt;0){
      x0 = optim_firm_df$exp[t] * (1-kappa)
    }
    else {
      x0 = optim_firm_df$exp[t]
    }
  aux = snssde1d(N=2,drift = drift, diffusion = diffusion, x0 = x0,M=1, type=&amp;quot;ito&amp;quot;,Dt=1)
  optim_firm_df$exp[t+1] = aux$X[2]
  optim_firm_df$shock[t+1] = aux$X[2]/aux$X[1]
  optim_firm_df$foreign[t+1] = optim_firm_df$foreign[t] + optim_firm_df$entry[t]
  optim_firm_df$profit[t] = (1-optim_firm_df$foreign[t])*optim_firm_df$tech_level[t]^0.5*optim_firm_df$exp[t]^0.5 * M_d +(optim_firm_df$foreign[t])*optim_firm_df$tech_level[t]^0.5*optim_firm_df$exp[t]^0.5 * M_m - (optim_firm_df$tech_level[t]+optim_firm_df$investment[t])*p_a*as.numeric(optim_firm_df$investment[t]&amp;gt;0) - optim_firm_df$entry[t] *F_M
  

}
  optim_firm_df$time[T] = T
  optim_firm_df$profit[T] = (1-optim_firm_df$foreign[T])*optim_firm_df$tech_level[T]^0.5*optim_firm_df$exp[T]^0.5 * M_d + (optim_firm_df$foreign[T])*optim_firm_df$tech_level[T]^0.5*optim_firm_df$exp[T]^0.5 * M_m
  
  
# plot policies
random_firm_df$cumulated_profit = random_firm_df$profit  
optim_firm_df$cumulated_profit = optim_firm_df$profit   
for (t in 2:T){
random_firm_df$cumulated_profit[t] = random_firm_df$cumulated_profit[t-1]+random_firm_df$profit[t]  
optim_firm_df$cumulated_profit[t] = optim_firm_df$cumulated_profit[t-1]+optim_firm_df$profit[t]   
}

random_firm_df$strategy &amp;lt;- &amp;#39;random&amp;#39;
optim_firm_df$strategy &amp;lt;- &amp;#39;optimal&amp;#39;
data &amp;lt;- rbind.data.frame(random_firm_df, optim_firm_df)

p1 = ggplot()+ 
  geom_step(data=data, aes(x=time,y=investment,colour=strategy),size=0.75,linetype=&amp;quot;longdash&amp;quot;)+
  ylab(&amp;quot;Investment&amp;quot;)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;))+
  #scale_color_viridis(discrete = TRUE,option = &amp;quot;D&amp;quot;)
  scale_colour_manual(values = c(&amp;#39;optimal&amp;#39; = &amp;quot;#0D0887FF&amp;quot;,
                                   &amp;#39;random&amp;#39; = &amp;#39;#CC4678FF&amp;#39;))
  

p2 = ggplot()+ 
  geom_step(data=data, aes(x=time,y=foreign,colour=strategy),size=0.75,linetype=&amp;quot;longdash&amp;quot;)+
  ylab(&amp;quot;Entry&amp;quot;)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;))+
  #scale_color_viridis(discrete = TRUE,option = &amp;quot;D&amp;quot;)
  scale_colour_manual(values = c(&amp;#39;optimal&amp;#39; = &amp;quot;#0D0887FF&amp;quot;,
                                   &amp;#39;random&amp;#39; = &amp;#39;#CC4678FF&amp;#39;))

p3 = ggplot()+ 
  geom_line(data=data, aes(x=time,y=tech_level,colour=strategy),size=0.75)+
  ylab(&amp;quot;Technology level&amp;quot;)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;))+
  #scale_color_viridis(discrete = TRUE,option = &amp;quot;D&amp;quot;)
  scale_colour_manual(values = c(&amp;#39;optimal&amp;#39; = &amp;quot;#0D0887FF&amp;quot;,
                                   &amp;#39;random&amp;#39; = &amp;#39;#CC4678FF&amp;#39;))

p4 = ggplot()+ 
  geom_line(data=data, aes(x=time,y=exp,colour=strategy),size=0.75)+
  ylab(&amp;quot;Expertise&amp;quot;)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;))+
  #scale_color_viridis(discrete = TRUE,option = &amp;quot;D&amp;quot;)
  scale_colour_manual(values = c(&amp;#39;optimal&amp;#39; = &amp;quot;#0D0887FF&amp;quot;,
                                   &amp;#39;random&amp;#39; = &amp;#39;#CC4678FF&amp;#39;))

p5 = ggplot()+ 
  geom_line(data=data, aes(x=time,y=cumulated_profit,colour=strategy),size=0.75)+
  ylab(&amp;quot;Cumulated profit&amp;quot;)+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = &amp;quot;black&amp;quot;))+
  #scale_color_viridis(discrete = TRUE,option = &amp;quot;D&amp;quot;)
  scale_colour_manual(values = c(&amp;#39;optimal&amp;#39; = &amp;quot;#0D0887FF&amp;quot;,
                                   &amp;#39;random&amp;#39; = &amp;#39;#CC4678FF&amp;#39;), name=&amp;quot;Strategy&amp;quot;)+
  theme(legend.key = element_rect(colour = NA, fill = NA))

figure &amp;lt;- ggpubr::ggarrange(ggpubr::ggarrange(p1, p2,ncol=2,legend = &amp;quot;none&amp;quot;),
                            ggpubr::ggarrange(p3, p4,ncol=2,legend = &amp;quot;none&amp;quot;), 
                            p5,
                            nrow = 3,
                            #labels = c(&amp;quot;Panel A: Actions&amp;quot;, &amp;quot;Panel B: States&amp;quot;, &amp;quot;Panel C: Profit&amp;quot;),
                            #font.label = list(size = 11, color = &amp;quot;black&amp;quot;, face =&amp;quot;bold.italic&amp;quot;, family = NULL),
                            vjust = 0,
                            common.legend = TRUE, 
                            legend = &amp;quot;bottom&amp;quot;)
figure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Optimal_stochastic_control/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rio de Janeiro crime map</title>
      <link>/code_project/brazil/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/code_project/brazil/</guid>
      <description>


&lt;p&gt;This markdown is based on work related to the project “Religion as an insurance” (joint work with Tiago Cavalcanti, Sriya Iyer, Chris Rauh and Maryam Vaziri) in which we use primary data from Rio de Janeiro about people’s socioeconomic circumstances, their perception about the future and their religiousness. The markdown aims to illustrate how to use specific location data and polygons to visualize data using ggmap.&lt;/p&gt;
&lt;div id=&#34;load-the-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load the dataset&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;brazil_dta &amp;lt;- read_dta(&amp;quot;brazil.dta&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-map-of-rio-de-janeiro-and-locations-of-interviewees&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot map of Rio de Janeiro and locations of interviewees&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qmplot(longitude,latitude,data=brazil_dta,mapcolor=&amp;quot;bw&amp;quot;,source=&amp;quot;stamen&amp;quot;,maptype = &amp;quot;terrain&amp;quot;,zoom=10,color=&amp;quot;red&amp;quot;,alpha=0.5,size=1,extent = &amp;quot;device&amp;quot;,margins=TRUE)+
  theme_set(theme_bw())+
  theme(legend.position = &amp;quot;none&amp;quot;)+
  xlab(&amp;quot;longitude&amp;quot;)+
  ylab(&amp;quot;latitute&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Brazil/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-police-districts-from-shapefile&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot police districts from shapefile&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;require(rgdal)
require(ggplot2)
shp &amp;lt;- raster::shapefile(&amp;quot;lm_dp_2019.shp&amp;quot;)

summary(shp@data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       dp                aisp             st_area_sh          st_length_     
##  Length:137         Length:137         Min.   :0.0001266   Min.   :0.05798  
##  Class :character   Class :character   1st Qu.:0.0016328   1st Qu.:0.28136  
##  Mode  :character   Mode  :character   Median :0.0148845   Median :0.76807  
##                                        Mean   :0.0279889   Mean   :0.93000  
##                                        3rd Qu.:0.0418780   3rd Qu.:1.38483  
##                                        Max.   :0.2328915   Max.   :4.98608&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- ggplot() + geom_polygon(data = shp, aes(x = long, y = lat, group = group), colour = &amp;quot;black&amp;quot;, fill = NA)
map + theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Brazil/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shp &amp;lt;- spTransform(shp, CRS(&amp;quot;+proj=longlat +datum=WGS84&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-maps-visualizing-crime-stats-per-police-district&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plot maps visualizing crime stats per police district&lt;/h3&gt;
&lt;p&gt;In fact, we combine official crime stats per police district such as murders, robberies and thefts per capita with interviewees’ perception of safety.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crime_data &amp;lt;- read.csv(&amp;quot;BaseDPEvolucaoMensalCisp.csv&amp;quot;,sep=&amp;quot;;&amp;quot;)
population &amp;lt;- read.csv(&amp;quot;PopulacaoEvolucaoAnualCisp.csv&amp;quot;,sep=&amp;quot;;&amp;quot;)

# group crime data for year 2018
crime_data %&amp;gt;%  
  left_join(population,by=c(&amp;quot;vano&amp;quot;, &amp;quot;CISP&amp;quot;=&amp;quot;circ&amp;quot;)) %&amp;gt;% 
  filter(vano==&amp;quot;2018&amp;quot;) %&amp;gt;% 
  group_by(CISP) %&amp;gt;% 
  summarise(abs_hom_doloso=sum(hom_doloso),
            abs_roubos=sum(total_roubos),
            abs_furtos=sum(total_furtos),
            pc_hom_doloso=sum(hom_doloso/as.numeric(pop)),
            pc_total_roubos=sum(total_roubos/as.numeric(pop)),
            pc_total_furtos=sum(total_furtos/as.numeric(pop))) -&amp;gt; crime_data_2018

# treat outlier island
crime_data_CISP1 &amp;lt;- crime_data_2018 %&amp;gt;% 
  filter(CISP==1) %&amp;gt;% 
  mutate(pc_hom_doloso=NA,
         pc_total_roubos=NA,
         pc_total_furtos=NA)
crime_data_2018 &amp;lt;- rbind(crime_data_CISP1,crime_data_2018[crime_data_2018$CISP!=1,])

shp_df &amp;lt;- fortify(shp, region = &amp;quot;dp&amp;quot;)
shp_crime &amp;lt;- merge(shp_df, crime_data_2018, by.x=&amp;quot;id&amp;quot;,by.y=&amp;quot;CISP&amp;quot;)

# plot shape file with crime data on map
ggplot()+
  geom_polygon(aes(x=long, y=lat, group=group, fill= pc_hom_doloso), size=.2,color=&amp;#39;black&amp;#39;, data=shp_crime, alpha=1)+
  scale_fill_gradient(high = &amp;quot;#FF6347&amp;quot;, low = &amp;quot;#90EE90&amp;quot;,name=&amp;quot;murders per capita in 2018&amp;quot;)+
  geom_point(aes(x=longitude,y=latitude,color=as.numeric(as_factor(safety))),alpha=1,data=brazil_dta)+
  scale_color_gradient(high = &amp;quot;#00FF00&amp;quot;, low = &amp;quot;#FF0000&amp;quot;,name=&amp;quot;perceived safety&amp;quot;,limits=c(0,10))+
  coord_map(xlim = c(-44, -42.75),ylim = c(-23.1, -22.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Brazil/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot shape file with crime data on map
ggplot()+
  geom_polygon(aes(x=long, y=lat, group=group, fill= pc_total_roubos), size=.2,color=&amp;#39;black&amp;#39;, data=shp_crime, alpha=1)+
  scale_fill_gradient(high = &amp;quot;#FF6347&amp;quot;, low = &amp;quot;#90EE90&amp;quot;,name=&amp;quot;robberies per capita in 2018&amp;quot;)+
  geom_point(aes(x=longitude,y=latitude,color=as.numeric(as_factor(safety))),alpha=1,data=brazil_dta)+
  scale_color_gradient(high = &amp;quot;#00FF00&amp;quot;, low = &amp;quot;#FF0000&amp;quot;,name=&amp;quot;perceived safety&amp;quot;,limits=c(0,10))+
  coord_map(xlim = c(-44, -42.75),ylim = c(-23.1, -22.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Brazil/index_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot shape file with crime data on map
ggplot()+
  geom_polygon(aes(x=long, y=lat, group=group, fill= pc_total_furtos), size=.2,color=&amp;#39;black&amp;#39;, data=shp_crime, alpha=1)+
  scale_fill_gradient(high = &amp;quot;#FF6347&amp;quot;, low = &amp;quot;#90EE90&amp;quot;,name=&amp;quot;thefts per capita in 2018&amp;quot;)+
  geom_point(aes(x=longitude,y=latitude,color=as.numeric(as_factor(safety))),alpha=1,data=brazil_dta)+
  scale_color_gradient(high = &amp;quot;#00FF00&amp;quot;, low = &amp;quot;#FF0000&amp;quot;,name=&amp;quot;perceived safety&amp;quot;,limits=c(0,10))+
  coord_map(xlim = c(-44, -42.75),ylim = c(-23.1, -22.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/code_project/Brazil/index_files/figure-html/unnamed-chunk-4-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
